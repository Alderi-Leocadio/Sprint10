
Sprint10_Funcionalidade_Livre.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  000020ce  00002162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000451  0080013e  0080013e  000021a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00002210  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000043d1  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d17  00000000  00000000  00006909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000234b  00000000  00000000  00007620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b10  00000000  00000000  0000996c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5c  00000000  00000000  0000a47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041e7  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000f3bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_5>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_10>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      38:	0c 94 e5 01 	jmp	0x3ca	; 0x3ca <__vector_14>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 85 01 	jmp	0x30a	; 0x30a <__vector_18>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_21>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <Font5x8>:
      68:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
      78:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
      88:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
      98:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
      a8:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
      b8:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
      c8:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
      d8:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
      e8:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
      f8:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     108:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     118:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     128:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     138:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     148:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     158:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     168:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     178:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     188:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     198:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     1a8:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     1b8:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     1c8:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     1d8:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     1e8:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     1f8:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     208:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     218:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     228:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     238:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     248:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     258:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     268:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     278:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     288:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     298:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	ee ec       	ldi	r30, 0xCE	; 206
     2bc:	f0 e2       	ldi	r31, 0x20	; 32
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	ae 33       	cpi	r26, 0x3E	; 62
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	ae e3       	ldi	r26, 0x3E	; 62
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	af 38       	cpi	r26, 0x8F	; 143
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 a0 06 	call	0xd40	; 0xd40 <main>
     2de:	0c 94 65 10 	jmp	0x20ca	; 0x20ca <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <USART_Init>:
// ||Função para recepção de um frame de 5 a 8bits||
unsigned char USART_Receive(void){
	
	while(!(UCSR0A & (1<<RXC0))); //Espera o dado ser recebido
	return UDR0; //Lê o dado recebido e retorna
}
     2e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     2ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     2ee:	88 e9       	ldi	r24, 0x98	; 152
     2f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     2f4:	8e e0       	ldi	r24, 0x0E	; 14
     2f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     2fa:	08 95       	ret

000002fc <USART_Transmit>:
     2fc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     300:	95 ff       	sbrs	r25, 5
     302:	fc cf       	rjmp	.-8      	; 0x2fc <USART_Transmit>
     304:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     308:	08 95       	ret

0000030a <__vector_18>:
     30a:	1f 92       	push	r1
     30c:	0f 92       	push	r0
     30e:	0f b6       	in	r0, 0x3f	; 63
     310:	0f 92       	push	r0
     312:	11 24       	eor	r1, r1
     314:	2f 93       	push	r18
     316:	3f 93       	push	r19
     318:	4f 93       	push	r20
     31a:	5f 93       	push	r21
     31c:	6f 93       	push	r22
     31e:	7f 93       	push	r23
     320:	8f 93       	push	r24
     322:	9f 93       	push	r25
     324:	af 93       	push	r26
     326:	bf 93       	push	r27
     328:	ef 93       	push	r30
     32a:	ff 93       	push	r31
     32c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     330:	8c 36       	cpi	r24, 0x6C	; 108
     332:	21 f4       	brne	.+8      	; 0x33c <__vector_18+0x32>
     334:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <temperatura_maxima+0x1>
     338:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <temperatura_maxima>
     33c:	84 36       	cpi	r24, 0x64	; 100
     33e:	39 f4       	brne	.+14     	; 0x34e <__vector_18+0x44>
     340:	84 e0       	ldi	r24, 0x04	; 4
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_read_byte>
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <USART_Transmit>
     34e:	ff 91       	pop	r31
     350:	ef 91       	pop	r30
     352:	bf 91       	pop	r27
     354:	af 91       	pop	r26
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	7f 91       	pop	r23
     35c:	6f 91       	pop	r22
     35e:	5f 91       	pop	r21
     360:	4f 91       	pop	r20
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0
     36c:	1f 90       	pop	r1
     36e:	18 95       	reti

00000370 <__vector_5>:

ISR(PCINT2_vect){ //Interrupção externa para os pinos PD
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	8f 93       	push	r24
     37c:	9f 93       	push	r25
	
	if((PIND&0b00010000) == 0) //Teste para identificar se o botão de aumentar o diâmetro está pressionado
     37e:	4c 99       	sbic	0x09, 4	; 9
     380:	0c c0       	rjmp	.+24     	; 0x39a <__vector_5+0x2a>
	{
		if(tamanho_pneu < 200){ //Limita o tamanho do pneu ao máximo de 200cm de diâmetro
     382:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tamanho_pneu>
     386:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <tamanho_pneu+0x1>
     38a:	88 3c       	cpi	r24, 0xC8	; 200
     38c:	91 05       	cpc	r25, r1
     38e:	28 f4       	brcc	.+10     	; 0x39a <__vector_5+0x2a>
			tamanho_pneu++; //Aumenta o diâmetro do pneu
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <tamanho_pneu+0x1>
     396:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tamanho_pneu>
		}
	}
	
	if((PIND&0b00100000) == 0){ //Teste para identificar se o botão de diminuir o diâmetro está pressionado
     39a:	4d 99       	sbic	0x09, 5	; 9
     39c:	0f c0       	rjmp	.+30     	; 0x3bc <__vector_5+0x4c>
		tamanho_pneu--; //Diminui o diâmetro do pneu
     39e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tamanho_pneu>
     3a2:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <tamanho_pneu+0x1>
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <tamanho_pneu+0x1>
     3ac:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tamanho_pneu>
		
		if(tamanho_pneu <= 0){ //Não permite o tamanho do pneu passar abaixo de zero
     3b0:	89 2b       	or	r24, r25
     3b2:	21 f4       	brne	.+8      	; 0x3bc <__vector_5+0x4c>
			tamanho_pneu = 0;
     3b4:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <tamanho_pneu+0x1>
     3b8:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <tamanho_pneu>
		}
	}
}
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	0f 90       	pop	r0
     3c2:	0f be       	out	0x3f, r0	; 63
     3c4:	0f 90       	pop	r0
     3c6:	1f 90       	pop	r1
     3c8:	18 95       	reti

000003ca <__vector_14>:

ISR(TIMER0_COMPA_vect){ //Interrupção do timer TC0 a cada 1ms
     3ca:	1f 92       	push	r1
     3cc:	0f 92       	push	r0
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	0f 92       	push	r0
     3d2:	11 24       	eor	r1, r1
     3d4:	2f 93       	push	r18
     3d6:	3f 93       	push	r19
     3d8:	5f 93       	push	r21
     3da:	6f 93       	push	r22
     3dc:	7f 93       	push	r23
     3de:	8f 93       	push	r24
     3e0:	9f 93       	push	r25
     3e2:	af 93       	push	r26
     3e4:	bf 93       	push	r27
	
	tempoX++;
     3e6:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <tempoX>
     3ea:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <tempoX+0x1>
     3ee:	2f 5f       	subi	r18, 0xFF	; 255
     3f0:	3f 4f       	sbci	r19, 0xFF	; 255
     3f2:	30 93 77 01 	sts	0x0177, r19	; 0x800177 <tempoX+0x1>
     3f6:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <tempoX>
	
	if((tempoX%5) == 0){ //Verdadeiro a cada 5ms
     3fa:	c9 01       	movw	r24, r18
     3fc:	65 e0       	ldi	r22, 0x05	; 5
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     404:	89 2b       	or	r24, r25
     406:	31 f4       	brne	.+12     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
		flag1 = 1;
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <flag1+0x1>
     410:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <flag1>
	}
	
	if((tempoX%300) == 0){ //verdadeiro a cada 300ms
     414:	c9 01       	movw	r24, r18
     416:	6c e2       	ldi	r22, 0x2C	; 44
     418:	71 e0       	ldi	r23, 0x01	; 1
     41a:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     41e:	89 2b       	or	r24, r25
     420:	31 f4       	brne	.+12     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
		flag2 = 1;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <flag2+0x1>
     42a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <flag2>
	}
}
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_10>:

ISR(TIMER1_CAPT_vect){ //Interrupção por captura do TC1
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	5f 93       	push	r21
     45a:	6f 93       	push	r22
     45c:	7f 93       	push	r23
     45e:	8f 93       	push	r24
     460:	9f 93       	push	r25
     462:	af 93       	push	r26
     464:	bf 93       	push	r27
     466:	ef 93       	push	r30
     468:	ff 93       	push	r31
	
	if(TCCR1B & (1<<ICES1)){ //Lê o valor de contagem do TC1 na borda de subida do sinal
     46a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     46e:	86 ff       	sbrs	r24, 6
     470:	09 c0       	rjmp	.+18     	; 0x484 <__vector_10+0x3a>
		tempo_borda_subida = ICR1; //Recebe a primeira contagem para determinar a largura do pulso
     472:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     476:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     47a:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <tempo_borda_subida+0x1>
     47e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <tempo_borda_subida>
     482:	14 c0       	rjmp	.+40     	; 0x4ac <__vector_10+0x62>
	}
	else{ //Lê o valor de contagem do TC1 na borda de descida do sinal
		variacao_tempo = (ICR1 - tempo_borda_subida)*16; //Cada incremento do TC1 corresponde a 16us
     484:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     488:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     48c:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <tempo_borda_subida>
     490:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <tempo_borda_subida+0x1>
     494:	82 1b       	sub	r24, r18
     496:	93 0b       	sbc	r25, r19
     498:	82 95       	swap	r24
     49a:	92 95       	swap	r25
     49c:	90 7f       	andi	r25, 0xF0	; 240
     49e:	98 27       	eor	r25, r24
     4a0:	80 7f       	andi	r24, 0xF0	; 240
     4a2:	98 27       	eor	r25, r24
     4a4:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <variacao_tempo+0x1>
     4a8:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <variacao_tempo>
	}
	
	TCCR1B ^= (1<<ICES1); //Inverte a borda de captura
     4ac:	e1 e8       	ldi	r30, 0x81	; 129
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	90 81       	ld	r25, Z
     4b2:	80 e4       	ldi	r24, 0x40	; 64
     4b4:	89 27       	eor	r24, r25
     4b6:	80 83       	st	Z, r24
	
	distancia_colisao = variacao_tempo/58; //Calculo da distancia (em cm) entre o carro e o objeto	
     4b8:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <variacao_tempo>
     4bc:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <variacao_tempo+0x1>
     4c0:	6a e3       	ldi	r22, 0x3A	; 58
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     4c8:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <distancia_colisao+0x1>
     4cc:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <distancia_colisao>
}
     4d0:	ff 91       	pop	r31
     4d2:	ef 91       	pop	r30
     4d4:	bf 91       	pop	r27
     4d6:	af 91       	pop	r26
     4d8:	9f 91       	pop	r25
     4da:	8f 91       	pop	r24
     4dc:	7f 91       	pop	r23
     4de:	6f 91       	pop	r22
     4e0:	5f 91       	pop	r21
     4e2:	3f 91       	pop	r19
     4e4:	2f 91       	pop	r18
     4e6:	0f 90       	pop	r0
     4e8:	0f be       	out	0x3f, r0	; 63
     4ea:	0f 90       	pop	r0
     4ec:	1f 90       	pop	r1
     4ee:	18 95       	reti

000004f0 <__vector_21>:

ISR(ADC_vect){ //Interrupção do ADC
     4f0:	1f 92       	push	r1
     4f2:	0f 92       	push	r0
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	0f 92       	push	r0
     4f8:	11 24       	eor	r1, r1
     4fa:	8f 93       	push	r24
     4fc:	9f 93       	push	r25
     4fe:	af 93       	push	r26
     500:	bf 93       	push	r27
	
	if(auxiliar2 == 1){
     502:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     506:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	89 f4       	brne	.+34     	; 0x530 <__vector_21+0x40>
		ADMUX = 0b01000000; // Tensão de referência em VCC com o pino PC0 como fonte do sinal
     50e:	80 e4       	ldi	r24, 0x40	; 64
     510:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		acelerador = ADC; //Variavél irá armazenar o valor do registrador ADC que é recebido pelo pino PC0
     514:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     518:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     51c:	a0 e0       	ldi	r26, 0x00	; 0
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <acelerador>
     524:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <acelerador+0x1>
     528:	a0 93 6c 01 	sts	0x016C, r26	; 0x80016c <acelerador+0x2>
     52c:	b0 93 6d 01 	sts	0x016D, r27	; 0x80016d <acelerador+0x3>
	}
	
	if(auxiliar2 == 2){
     530:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     534:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     538:	02 97       	sbiw	r24, 0x02	; 2
     53a:	89 f4       	brne	.+34     	; 0x55e <__vector_21+0x6e>
		ADMUX = 0b01000001; // Tensão de referência em VCC com o pino PC1 como fonte do sinal
     53c:	81 e4       	ldi	r24, 0x41	; 65
     53e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		bateria = ADC; //Variavél irá armazenar o valor do registrador ADC que é recebido pelo pino PC1
     542:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     546:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     54a:	a0 e0       	ldi	r26, 0x00	; 0
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <bateria>
     552:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <bateria+0x1>
     556:	a0 93 5e 01 	sts	0x015E, r26	; 0x80015e <bateria+0x2>
     55a:	b0 93 5f 01 	sts	0x015F, r27	; 0x80015f <bateria+0x3>
	}
	
	if(auxiliar2 == 3){
     55e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     562:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     566:	03 97       	sbiw	r24, 0x03	; 3
     568:	a9 f4       	brne	.+42     	; 0x594 <__vector_21+0xa4>
		ADMUX = 0b01000010; // Tensão de referência em VCC com o pino PC2 como fonte do sinal
     56a:	82 e4       	ldi	r24, 0x42	; 66
     56c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		temperatura_bateria = ADC; //Variavél irá armazenar o valor do registrador ADC que é recebido pelo pino PC2
     570:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     574:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     578:	a0 e0       	ldi	r26, 0x00	; 0
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <temperatura_bateria>
     580:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <temperatura_bateria+0x1>
     584:	a0 93 52 01 	sts	0x0152, r26	; 0x800152 <temperatura_bateria+0x2>
     588:	b0 93 53 01 	sts	0x0153, r27	; 0x800153 <temperatura_bateria+0x3>
		auxiliar2 = 0;
     58c:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <__data_end+0x1>
     590:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <__data_end>
	}
	auxiliar2++;
     594:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <__data_end>
     598:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <__data_end+0x1>
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x1>
     5a2:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end>
}
     5a6:	bf 91       	pop	r27
     5a8:	af 91       	pop	r26
     5aa:	9f 91       	pop	r25
     5ac:	8f 91       	pop	r24
     5ae:	0f 90       	pop	r0
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	0f 90       	pop	r0
     5b4:	1f 90       	pop	r1
     5b6:	18 95       	reti

000005b8 <__vector_1>:

ISR(INT0_vect){ //Interrupção externa INT0 relacionada ao tacômetro
     5b8:	1f 92       	push	r1
     5ba:	0f 92       	push	r0
     5bc:	0f b6       	in	r0, 0x3f	; 63
     5be:	0f 92       	push	r0
     5c0:	11 24       	eor	r1, r1
     5c2:	4f 92       	push	r4
     5c4:	5f 92       	push	r5
     5c6:	6f 92       	push	r6
     5c8:	7f 92       	push	r7
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
     5de:	2f 93       	push	r18
     5e0:	3f 93       	push	r19
     5e2:	4f 93       	push	r20
     5e4:	5f 93       	push	r21
     5e6:	6f 93       	push	r22
     5e8:	7f 93       	push	r23
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	af 93       	push	r26
     5f0:	bf 93       	push	r27
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	ef 93       	push	r30
     5f8:	ff 93       	push	r31
	
	if(quant_voltas_pneu == 5){
     5fa:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <quant_voltas_pneu>
     5fe:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <quant_voltas_pneu+0x1>
     602:	05 97       	sbiw	r24, 0x05	; 5
     604:	09 f0       	breq	.+2      	; 0x608 <__vector_1+0x50>
     606:	47 c0       	rjmp	.+142    	; 0x696 <__vector_1+0xde>
		intervalo_de_tempo = tempoX - tempo_anterior_us; //Calculo do tempo que leva para percorrer a distância entre 2 bordas de descida, ou seja, o tempo que leva para percorrer o comprimento do pneu do carro
     608:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <tempoX>
     60c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <tempoX+0x1>
     610:	20 91 74 01 	lds	r18, 0x0174	; 0x800174 <tempo_anterior_us>
     614:	30 91 75 01 	lds	r19, 0x0175	; 0x800175 <tempo_anterior_us+0x1>
     618:	6c 01       	movw	r12, r24
     61a:	c2 1a       	sub	r12, r18
     61c:	d3 0a       	sbc	r13, r19
     61e:	d0 92 73 01 	sts	0x0173, r13	; 0x800173 <intervalo_de_tempo+0x1>
     622:	c0 92 72 01 	sts	0x0172, r12	; 0x800172 <intervalo_de_tempo>
		
		tempo_anterior_us = tempoX; //Atualiza o valor da variável tempo_anterior_us
     626:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <tempo_anterior_us+0x1>
     62a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <tempo_anterior_us>
		
		RPM = 300000/intervalo_de_tempo; //Cálculo das Rotações Por Minuto do carro [(5voltas*60min*1000ms)/intervalo_de_tempo]
     62e:	0d 2c       	mov	r0, r13
     630:	00 0c       	add	r0, r0
     632:	ee 08       	sbc	r14, r14
     634:	ff 08       	sbc	r15, r15
     636:	60 ee       	ldi	r22, 0xE0	; 224
     638:	73 e9       	ldi	r23, 0x93	; 147
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	a7 01       	movw	r20, r14
     640:	96 01       	movw	r18, r12
     642:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__divmodsi4>
     646:	30 93 6f 01 	sts	0x016F, r19	; 0x80016f <RPM+0x1>
     64a:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <RPM>
		
		velocidade_veiculo = (565.47*tamanho_pneu)/intervalo_de_tempo; //Cálculo da velocidade do carro [((5voltas*3.1415*10*3.6)*tamanho_pneu/intervalor_de_tempo]
     64e:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <tamanho_pneu>
     652:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <tamanho_pneu+0x1>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__floatunsisf>
     65e:	24 e1       	ldi	r18, 0x14	; 20
     660:	3e e5       	ldi	r19, 0x5E	; 94
     662:	4d e0       	ldi	r20, 0x0D	; 13
     664:	54 e4       	ldi	r21, 0x44	; 68
     666:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulsf3>
     66a:	4b 01       	movw	r8, r22
     66c:	5c 01       	movw	r10, r24
     66e:	c7 01       	movw	r24, r14
     670:	b6 01       	movw	r22, r12
     672:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__floatsisf>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c5 01       	movw	r24, r10
     67c:	b4 01       	movw	r22, r8
     67e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__divsf3>
     682:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fixsfsi>
     686:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <velocidade_veiculo+0x1>
     68a:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <velocidade_veiculo>
		
		quant_voltas_pneu = 0;
     68e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <quant_voltas_pneu+0x1>
     692:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <quant_voltas_pneu>
	}
	
	quant_voltas_pneu++; //Variável que armazena a quantidade de voltas do pneu do carro
     696:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <quant_voltas_pneu>
     69a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <quant_voltas_pneu+0x1>
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <quant_voltas_pneu+0x1>
     6a4:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <quant_voltas_pneu>
	
	distancia_percorrida_cm += 3.1415*tamanho_pneu; //Cálculo da distância percorrida em cm, a cada volta do pneu é incrementado a distância percorrida
     6a8:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <tamanho_pneu>
     6ac:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <tamanho_pneu+0x1>
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__floatunsisf>
     6b8:	26 e5       	ldi	r18, 0x56	; 86
     6ba:	3e e0       	ldi	r19, 0x0E	; 14
     6bc:	49 e4       	ldi	r20, 0x49	; 73
     6be:	50 e4       	ldi	r21, 0x40	; 64
     6c0:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulsf3>
     6c4:	6b 01       	movw	r12, r22
     6c6:	7c 01       	movw	r14, r24
     6c8:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <distancia_percorrida_cm>
     6cc:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <distancia_percorrida_cm+0x1>
     6d0:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <distancia_percorrida_cm+0x2>
     6d4:	50 91 7d 01 	lds	r21, 0x017D	; 0x80017d <distancia_percorrida_cm+0x3>
     6d8:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <distancia_percorrida_cm+0x4>
     6dc:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <distancia_percorrida_cm+0x5>
     6e0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <distancia_percorrida_cm+0x6>
     6e4:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <distancia_percorrida_cm+0x7>
     6e8:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__floatundisf>
     6ec:	a7 01       	movw	r20, r14
     6ee:	96 01       	movw	r18, r12
     6f0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__addsf3>
     6f4:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__fixunssfdi>
     6f8:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <distancia_percorrida_cm>
     6fc:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <distancia_percorrida_cm+0x1>
     700:	40 93 7c 01 	sts	0x017C, r20	; 0x80017c <distancia_percorrida_cm+0x2>
     704:	50 93 7d 01 	sts	0x017D, r21	; 0x80017d <distancia_percorrida_cm+0x3>
     708:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <distancia_percorrida_cm+0x4>
     70c:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <distancia_percorrida_cm+0x5>
     710:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <distancia_percorrida_cm+0x6>
     714:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <distancia_percorrida_cm+0x7>
	distancia_percorrida_km = distancia_percorrida_cm/100000; //Converte a distância percorrida de cm para km
     718:	0f 2e       	mov	r0, r31
     71a:	f0 ea       	ldi	r31, 0xA0	; 160
     71c:	af 2e       	mov	r10, r31
     71e:	f0 2d       	mov	r31, r0
     720:	0f 2e       	mov	r0, r31
     722:	f6 e8       	ldi	r31, 0x86	; 134
     724:	bf 2e       	mov	r11, r31
     726:	f0 2d       	mov	r31, r0
     728:	cc 24       	eor	r12, r12
     72a:	c3 94       	inc	r12
     72c:	d1 2c       	mov	r13, r1
     72e:	e1 2c       	mov	r14, r1
     730:	f1 2c       	mov	r15, r1
     732:	00 e0       	ldi	r16, 0x00	; 0
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__udivdi3>
     73a:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <distancia_percorrida_km>
     73e:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <distancia_percorrida_km+0x1>
	
	if(distancia_colisao < 300 && velocidade_veiculo > 20){ //Se a distância for menor que 3m e a velocidade maior que 20Km/h reduz o duty cicle para 10%
     742:	c0 91 60 01 	lds	r28, 0x0160	; 0x800160 <distancia_colisao>
     746:	d0 91 61 01 	lds	r29, 0x0161	; 0x800161 <distancia_colisao+0x1>
     74a:	cc 32       	cpi	r28, 0x2C	; 44
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	d8 07       	cpc	r29, r24
     750:	0c f5       	brge	.+66     	; 0x794 <__vector_1+0x1dc>
     752:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <velocidade_veiculo>
     756:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <velocidade_veiculo+0x1>
     75a:	45 97       	sbiw	r24, 0x15	; 21
     75c:	dc f0       	brlt	.+54     	; 0x794 <__vector_1+0x1dc>
		acelerador_proporcional = (acelerador*255)/10230; //Ajusta a escala do potenciômetro/acelerador passando de analógico para digital
     75e:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <acelerador>
     762:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <acelerador+0x1>
     766:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <acelerador+0x2>
     76a:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <acelerador+0x3>
     76e:	af ef       	ldi	r26, 0xFF	; 255
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__muluhisi3>
     776:	26 ef       	ldi	r18, 0xF6	; 246
     778:	37 e2       	ldi	r19, 0x27	; 39
     77a:	40 e0       	ldi	r20, 0x00	; 0
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodsi4>
     782:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <acelerador_proporcional>
     786:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <acelerador_proporcional+0x1>
     78a:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <acelerador_proporcional+0x2>
     78e:	50 93 69 01 	sts	0x0169, r21	; 0x800169 <acelerador_proporcional+0x3>
     792:	1a c0       	rjmp	.+52     	; 0x7c8 <__vector_1+0x210>
	}	
	else{
		acelerador_proporcional = (acelerador*255)/1023; //Ajusta a escala do potenciômetro/acelerador passando de analógico para digital
     794:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <acelerador>
     798:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <acelerador+0x1>
     79c:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <acelerador+0x2>
     7a0:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <acelerador+0x3>
     7a4:	af ef       	ldi	r26, 0xFF	; 255
     7a6:	b0 e0       	ldi	r27, 0x00	; 0
     7a8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__muluhisi3>
     7ac:	2f ef       	ldi	r18, 0xFF	; 255
     7ae:	33 e0       	ldi	r19, 0x03	; 3
     7b0:	40 e0       	ldi	r20, 0x00	; 0
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodsi4>
     7b8:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <acelerador_proporcional>
     7bc:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <acelerador_proporcional+0x1>
     7c0:	40 93 68 01 	sts	0x0168, r20	; 0x800168 <acelerador_proporcional+0x2>
     7c4:	50 93 69 01 	sts	0x0169, r21	; 0x800169 <acelerador_proporcional+0x3>
	}
		
	bateria_proporcional = (bateria*100)/1023; //Ajusta a escala da tensão da bateria
     7c8:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <bateria>
     7cc:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <bateria+0x1>
     7d0:	40 91 5e 01 	lds	r20, 0x015E	; 0x80015e <bateria+0x2>
     7d4:	50 91 5f 01 	lds	r21, 0x015F	; 0x80015f <bateria+0x3>
     7d8:	a4 e6       	ldi	r26, 0x64	; 100
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__muluhisi3>
     7e0:	2f ef       	ldi	r18, 0xFF	; 255
     7e2:	33 e0       	ldi	r19, 0x03	; 3
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	50 e0       	ldi	r21, 0x00	; 0
     7e8:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodsi4>
     7ec:	ca 01       	movw	r24, r20
     7ee:	b9 01       	movw	r22, r18
     7f0:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__floatunsisf>
     7f4:	4b 01       	movw	r8, r22
     7f6:	5c 01       	movw	r10, r24
     7f8:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <bateria_proporcional>
     7fc:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <bateria_proporcional+0x1>
     800:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <bateria_proporcional+0x2>
     804:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <bateria_proporcional+0x3>
	
	Rt = (temperatura_bateria*4.88758)/(5 - (temperatura_bateria*0.004887)); //Calcula o valor do resistor RTD ajustando a escala [Rt = (Vt*R1)/(Vcc-Vt)], [Vt = temperatura_bateria*5/1023]
     808:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <temperatura_bateria>
     80c:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <temperatura_bateria+0x1>
     810:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <temperatura_bateria+0x2>
     814:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <temperatura_bateria+0x3>
     818:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <__floatunsisf>
     81c:	6b 01       	movw	r12, r22
     81e:	7c 01       	movw	r14, r24
     820:	2e e0       	ldi	r18, 0x0E	; 14
     822:	37 e6       	ldi	r19, 0x67	; 103
     824:	4c e9       	ldi	r20, 0x9C	; 156
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulsf3>
     82c:	2b 01       	movw	r4, r22
     82e:	3c 01       	movw	r6, r24
     830:	21 e2       	ldi	r18, 0x21	; 33
     832:	33 e2       	ldi	r19, 0x23	; 35
     834:	40 ea       	ldi	r20, 0xA0	; 160
     836:	5b e3       	ldi	r21, 0x3B	; 59
     838:	c7 01       	movw	r24, r14
     83a:	b6 01       	movw	r22, r12
     83c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulsf3>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	80 ea       	ldi	r24, 0xA0	; 160
     84a:	90 e4       	ldi	r25, 0x40	; 64
     84c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__subsf3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	c3 01       	movw	r24, r6
     856:	b2 01       	movw	r22, r4
     858:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__divsf3>
     85c:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <Rt>
     860:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <Rt+0x1>
     864:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <Rt+0x2>
     868:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <Rt+0x3>
	temperatura_bateria_proporcional = ((float)2.597402)*(Rt-100); //Calcula a temperatura da bateria
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	48 ec       	ldi	r20, 0xC8	; 200
     872:	52 e4       	ldi	r21, 0x42	; 66
     874:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__subsf3>
     878:	26 ed       	ldi	r18, 0xD6	; 214
     87a:	3b e3       	ldi	r19, 0x3B	; 59
     87c:	46 e2       	ldi	r20, 0x26	; 38
     87e:	50 e4       	ldi	r21, 0x40	; 64
     880:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulsf3>
     884:	6b 01       	movw	r12, r22
     886:	7c 01       	movw	r14, r24
     888:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <temperatura_bateria_proporcional>
     88c:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <temperatura_bateria_proporcional+0x1>
     890:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temperatura_bateria_proporcional+0x2>
     894:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <temperatura_bateria_proporcional+0x3>
	
	if(temperatura_bateria_proporcional - ((int)temperatura_bateria_proporcional)>= (1/2)){	//Faz o arredondamento do valor da temperatura
     898:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fixsfsi>
     89c:	07 2e       	mov	r0, r23
     89e:	00 0c       	add	r0, r0
     8a0:	88 0b       	sbc	r24, r24
     8a2:	99 0b       	sbc	r25, r25
     8a4:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__floatsisf>
     8a8:	9b 01       	movw	r18, r22
     8aa:	ac 01       	movw	r20, r24
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__subsf3>
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	a9 01       	movw	r20, r18
     8ba:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <__gesf2>
     8be:	88 23       	and	r24, r24
     8c0:	84 f0       	brlt	.+32     	; 0x8e2 <__DATA_REGION_LENGTH__+0xe2>
		temperatura_bateria_proporcional++;
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 e8       	ldi	r20, 0x80	; 128
     8c8:	5f e3       	ldi	r21, 0x3F	; 63
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__addsf3>
     8d2:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <temperatura_bateria_proporcional>
     8d6:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <temperatura_bateria_proporcional+0x1>
     8da:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <temperatura_bateria_proporcional+0x2>
     8de:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <temperatura_bateria_proporcional+0x3>
	}
	
	if(temperatura_bateria_proporcional > temperatura_maxima){
     8e2:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <temperatura_maxima>
     8e6:	70 91 4b 01 	lds	r23, 0x014B	; 0x80014b <temperatura_maxima+0x1>
     8ea:	07 2e       	mov	r0, r23
     8ec:	00 0c       	add	r0, r0
     8ee:	88 0b       	sbc	r24, r24
     8f0:	99 0b       	sbc	r25, r25
     8f2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__floatsisf>
     8f6:	c0 90 4c 01 	lds	r12, 0x014C	; 0x80014c <temperatura_bateria_proporcional>
     8fa:	d0 90 4d 01 	lds	r13, 0x014D	; 0x80014d <temperatura_bateria_proporcional+0x1>
     8fe:	e0 90 4e 01 	lds	r14, 0x014E	; 0x80014e <temperatura_bateria_proporcional+0x2>
     902:	f0 90 4f 01 	lds	r15, 0x014F	; 0x80014f <temperatura_bateria_proporcional+0x3>
     906:	a7 01       	movw	r20, r14
     908:	96 01       	movw	r18, r12
     90a:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__cmpsf2>
     90e:	88 23       	and	r24, r24
     910:	44 f4       	brge	.+16     	; 0x922 <__stack+0x23>
		temperatura_maxima = (unsigned int)temperatura_bateria_proporcional;
     912:	c7 01       	movw	r24, r14
     914:	b6 01       	movw	r22, r12
     916:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fixunssfsi>
     91a:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <temperatura_maxima+0x1>
     91e:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <temperatura_maxima>
	}
	
	if(temperatura_bateria_proporcional < 0){
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	a9 01       	movw	r20, r18
     928:	c7 01       	movw	r24, r14
     92a:	b6 01       	movw	r22, r12
     92c:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__cmpsf2>
     930:	88 23       	and	r24, r24
     932:	44 f4       	brge	.+16     	; 0x944 <__stack+0x45>
		temperatura_bateria_proporcional = 0;
     934:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <temperatura_bateria_proporcional>
     938:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <temperatura_bateria_proporcional+0x1>
     93c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <temperatura_bateria_proporcional+0x2>
     940:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <temperatura_bateria_proporcional+0x3>
	}
	
	autonomia = 4.4*bateria_proporcional;
     944:	2d ec       	ldi	r18, 0xCD	; 205
     946:	3c ec       	ldi	r19, 0xCC	; 204
     948:	4c e8       	ldi	r20, 0x8C	; 140
     94a:	50 e4       	ldi	r21, 0x40	; 64
     94c:	c5 01       	movw	r24, r10
     94e:	b4 01       	movw	r22, r8
     950:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__mulsf3>
     954:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <autonomia>
     958:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <autonomia+0x1>
     95c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <autonomia+0x2>
     960:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <autonomia+0x3>
	
	if(distancia_colisao < 100){
     964:	c4 36       	cpi	r28, 0x64	; 100
     966:	d1 05       	cpc	r29, r1
     968:	24 f4       	brge	.+8      	; 0x972 <__stack+0x73>
		PORTC |= (1<<3);
     96a:	88 b1       	in	r24, 0x08	; 8
     96c:	88 60       	ori	r24, 0x08	; 8
     96e:	88 b9       	out	0x08, r24	; 8
     970:	01 c0       	rjmp	.+2      	; 0x974 <__stack+0x75>
	}
	else{
		PORTC = (0<<3);
     972:	18 b8       	out	0x08, r1	; 8
	}
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	bf 91       	pop	r27
     97e:	af 91       	pop	r26
     980:	9f 91       	pop	r25
     982:	8f 91       	pop	r24
     984:	7f 91       	pop	r23
     986:	6f 91       	pop	r22
     988:	5f 91       	pop	r21
     98a:	4f 91       	pop	r20
     98c:	3f 91       	pop	r19
     98e:	2f 91       	pop	r18
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	7f 90       	pop	r7
     9a6:	6f 90       	pop	r6
     9a8:	5f 90       	pop	r5
     9aa:	4f 90       	pop	r4
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <mostrar_velocidade>:
			writ_EEPROM(); //Chamando função para escrever na memória EEPROM
		}
	}
}

void mostrar_velocidade(int *flag1m){
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	fc 01       	movw	r30, r24
	
	if(*flag1m){
     9bc:	80 81       	ld	r24, Z
     9be:	91 81       	ldd	r25, Z+1	; 0x01
     9c0:	89 2b       	or	r24, r25
     9c2:	09 f4       	brne	.+2      	; 0x9c6 <mostrar_velocidade+0x10>
     9c4:	64 c0       	rjmp	.+200    	; 0xa8e <mostrar_velocidade+0xd8>
		switch (auxiliar1){
     9c6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <auxiliar1>
     9ca:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <auxiliar1+0x1>
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	91 05       	cpc	r25, r1
     9d2:	d9 f0       	breq	.+54     	; 0xa0a <mostrar_velocidade+0x54>
     9d4:	83 30       	cpi	r24, 0x03	; 3
     9d6:	91 05       	cpc	r25, r1
     9d8:	91 f1       	breq	.+100    	; 0xa3e <mostrar_velocidade+0x88>
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <mostrar_velocidade+0x2a>
     9de:	4c c0       	rjmp	.+152    	; 0xa78 <mostrar_velocidade+0xc2>
			case 1:
			PORTB &= 0b00000001; //Resetando os pinos PB1 a PB7
     9e0:	85 b1       	in	r24, 0x05	; 5
     9e2:	81 70       	andi	r24, 0x01	; 1
     9e4:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b11000000; //Resetando o pino PB5, pino que habilita o display das unidades
     9e6:	85 b1       	in	r24, 0x05	; 5
     9e8:	80 6c       	ori	r24, 0xC0	; 192
     9ea:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_veiculo/1)%10) << 1) & 0b00011111); //Calculo para imprimir a unidade no display 7 segmentos com uma máscara para evitar lixo em caso de uma conta errada
     9ec:	25 b1       	in	r18, 0x05	; 5
     9ee:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <velocidade_veiculo>
     9f2:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <velocidade_veiculo+0x1>
     9f6:	6a e0       	ldi	r22, 0x0A	; 10
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	8f 71       	andi	r24, 0x1F	; 31
     a04:	82 2b       	or	r24, r18
     a06:	85 b9       	out	0x05, r24	; 5
			break;
     a08:	37 c0       	rjmp	.+110    	; 0xa78 <mostrar_velocidade+0xc2>
			
			case 2:
			PORTB &= 0b00000001; //Resetando os pinos PB1 a PB7
     a0a:	85 b1       	in	r24, 0x05	; 5
     a0c:	81 70       	andi	r24, 0x01	; 1
     a0e:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b10100000; //Resetando o pino PB6, pino que habilita o display das dezenas
     a10:	85 b1       	in	r24, 0x05	; 5
     a12:	80 6a       	ori	r24, 0xA0	; 160
     a14:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_veiculo/10)%10) << 1) & 0b00011111); //Calculo para imprimir a dezana no display 7 segmentos com uma máscara para evitar lixo em caso de uma conta errada
     a16:	25 b1       	in	r18, 0x05	; 5
     a18:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <velocidade_veiculo>
     a1c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <velocidade_veiculo+0x1>
     a20:	ca e0       	ldi	r28, 0x0A	; 10
     a22:	d0 e0       	ldi	r29, 0x00	; 0
     a24:	be 01       	movw	r22, r28
     a26:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     a2a:	cb 01       	movw	r24, r22
     a2c:	be 01       	movw	r22, r28
     a2e:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	8f 71       	andi	r24, 0x1F	; 31
     a38:	82 2b       	or	r24, r18
     a3a:	85 b9       	out	0x05, r24	; 5
			break;
     a3c:	1d c0       	rjmp	.+58     	; 0xa78 <mostrar_velocidade+0xc2>
			
			case 3:
			PORTB &= 0b00000001; //Resetando os pinos PB1 a PB7
     a3e:	85 b1       	in	r24, 0x05	; 5
     a40:	81 70       	andi	r24, 0x01	; 1
     a42:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b01100000; //Resetando o pino PB7, pino que habilita o display das centenas
     a44:	85 b1       	in	r24, 0x05	; 5
     a46:	80 66       	ori	r24, 0x60	; 96
     a48:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_veiculo/100)%10) << 1) & 0b00011111); //Calculo para imprimir a centena no display 7 segmentos com uma máscara para evitar lixo em caso de uma conta errada
     a4a:	25 b1       	in	r18, 0x05	; 5
     a4c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <velocidade_veiculo>
     a50:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <velocidade_veiculo+0x1>
     a54:	64 e6       	ldi	r22, 0x64	; 100
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     a5c:	cb 01       	movw	r24, r22
     a5e:	6a e0       	ldi	r22, 0x0A	; 10
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <__divmodhi4>
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	8f 71       	andi	r24, 0x1F	; 31
     a6c:	82 2b       	or	r24, r18
     a6e:	85 b9       	out	0x05, r24	; 5
			auxiliar1 = 0;
     a70:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <auxiliar1+0x1>
     a74:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <auxiliar1>
			break;
		}
		auxiliar1++;
     a78:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <auxiliar1>
     a7c:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <auxiliar1+0x1>
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <auxiliar1+0x1>
     a86:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <auxiliar1>
		*flag1m = 0;
     a8a:	11 82       	std	Z+1, r1	; 0x01
     a8c:	10 82       	st	Z, r1
	}
}
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <mostrar_OLED>:

void mostrar_OLED(int *flag2m){
     a94:	0f 93       	push	r16
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	ec 01       	movw	r28, r24
	
	if(*flag2m && !(PINC & (1<<6))){
     a9c:	88 81       	ld	r24, Y
     a9e:	99 81       	ldd	r25, Y+1	; 0x01
     aa0:	89 2b       	or	r24, r25
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <mostrar_OLED+0x12>
     aa4:	90 c0       	rjmp	.+288    	; 0xbc6 <mostrar_OLED+0x132>
     aa6:	36 99       	sbic	0x06, 6	; 6
     aa8:	8e c0       	rjmp	.+284    	; 0xbc6 <mostrar_OLED+0x132>
		//Funções para imprimir no display OLED
		GLCD_Clear(); //Apaga o conteúdo para reescrever
     aaa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GLCD_Clear>
		
		GLCD_GotoXY(1, 1); //Define a posição para escrita
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
		GLCD_PrintString("LASD Car"); //Escreve a string no display OLED
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		GLCD_DrawLine(1,10,48,10,GLCD_Black); //Escreve uma linha abaixo da string
     abe:	0f ef       	ldi	r16, 0xFF	; 255
     ac0:	2a e0       	ldi	r18, 0x0A	; 10
     ac2:	40 e3       	ldi	r20, 0x30	; 48
     ac4:	6a e0       	ldi	r22, 0x0A	; 10
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	0e 94 c3 09 	call	0x1386	; 0x1386 <GLCD_DrawLine>
		
		GLCD_GotoXY(1, 16); //Define a posição para escrita
     acc:	60 e1       	ldi	r22, 0x10	; 16
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
		GLCD_PrintInteger(RPM); //Escreve o RMP do carro no display OLED
     ad4:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <RPM>
     ad8:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <RPM+0x1>
     adc:	07 2e       	mov	r0, r23
     ade:	00 0c       	add	r0, r0
     ae0:	88 0b       	sbc	r24, r24
     ae2:	99 0b       	sbc	r25, r25
     ae4:	0e 94 1f 0c 	call	0x183e	; 0x183e <GLCD_PrintInteger>
		GLCD_PrintString(" rpm"); //Escreve a string no display OLED
     ae8:	89 e0       	ldi	r24, 0x09	; 9
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		
		GLCD_GotoXY(1, 25); //Define a posição para escrita
     af0:	69 e1       	ldi	r22, 0x19	; 25
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
		GLCD_PrintString("Sonar: "); //Escreve a string no display OLED
     af8:	8e e0       	ldi	r24, 0x0E	; 14
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		GLCD_PrintInteger(distancia_colisao); //Escreve a distância do objeto no display OLED
     b00:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <distancia_colisao>
     b04:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <distancia_colisao+0x1>
     b08:	07 2e       	mov	r0, r23
     b0a:	00 0c       	add	r0, r0
     b0c:	88 0b       	sbc	r24, r24
     b0e:	99 0b       	sbc	r25, r25
     b10:	0e 94 1f 0c 	call	0x183e	; 0x183e <GLCD_PrintInteger>
		GLCD_PrintString("cm");
     b14:	86 e1       	ldi	r24, 0x16	; 22
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		
		GLCD_GotoXY(1, 34); //Define a posição para escrita
     b1c:	62 e2       	ldi	r22, 0x22	; 34
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
		GLCD_PrintString("D. pneu: "); //Escreve a string no display OLED
     b24:	89 e1       	ldi	r24, 0x19	; 25
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		GLCD_PrintInteger(tamanho_pneu); //Escreve o diâmetro do pneu no display OLED
     b2c:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <tamanho_pneu>
     b30:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <tamanho_pneu+0x1>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 1f 0c 	call	0x183e	; 0x183e <GLCD_PrintInteger>
		GLCD_PrintString("cm");
     b3c:	86 e1       	ldi	r24, 0x16	; 22
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		
		GLCD_GotoXY(20, 50); //Define a posição para escrita
     b44:	62 e3       	ldi	r22, 0x32	; 50
     b46:	84 e1       	ldi	r24, 0x14	; 20
     b48:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
		GLCD_PrintInteger(distancia_percorrida_km); //Escreve a distância percorrida no display OLED
     b4c:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <distancia_percorrida_km>
     b50:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <distancia_percorrida_km+0x1>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 1f 0c 	call	0x183e	; 0x183e <GLCD_PrintInteger>
		GLCD_PrintString(" Km"); //Escreve a string no display OLED
     b5c:	83 e2       	ldi	r24, 0x23	; 35
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		
		GLCD_DrawRectangle(13,47,64,60,GLCD_Black); //Quadrado distância percorrida
     b64:	2c e3       	ldi	r18, 0x3C	; 60
     b66:	40 e4       	ldi	r20, 0x40	; 64
     b68:	6f e2       	ldi	r22, 0x2F	; 47
     b6a:	8d e0       	ldi	r24, 0x0D	; 13
     b6c:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_DrawRectangle>
		GLCD_DrawRectangle(87,47,97,60,GLCD_Black); //Quadrado modo de operação
     b70:	2c e3       	ldi	r18, 0x3C	; 60
     b72:	41 e6       	ldi	r20, 0x61	; 97
     b74:	6f e2       	ldi	r22, 0x2F	; 47
     b76:	87 e5       	ldi	r24, 0x57	; 87
     b78:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_DrawRectangle>
		
		if(!(PIND & (1<<7))){ //Se o pino PD7 estiver recebendo 0 mostrará letra P no LCD indicando o modo park
     b7c:	4f 99       	sbic	0x09, 7	; 9
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <mostrar_OLED+0xfc>
			GLCD_GotoXY(90, 50); //Define a posição para escrita
     b80:	62 e3       	ldi	r22, 0x32	; 50
     b82:	8a e5       	ldi	r24, 0x5A	; 90
     b84:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
			GLCD_PrintString("P"); //Escreve a string no display OLED
     b88:	87 e2       	ldi	r24, 0x27	; 39
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
		}
		if(PIND & (1<<7)){ //Se o pino PD7 estiver recebendo 1
     b90:	4f 9b       	sbis	0x09, 7	; 9
     b92:	15 c0       	rjmp	.+42     	; 0xbbe <mostrar_OLED+0x12a>
			if(PIND & (1<<6)){ //Se o pino 6 estiver recebendo 1 mostrará letra R no LCD indicando o modo reverse
     b94:	4e 9b       	sbis	0x09, 6	; 9
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <mostrar_OLED+0x116>
				GLCD_GotoXY(90, 50); //Define a posição para escrita
     b98:	62 e3       	ldi	r22, 0x32	; 50
     b9a:	8a e5       	ldi	r24, 0x5A	; 90
     b9c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
				GLCD_PrintString("R"); //Escreve a string no display OLED
     ba0:	89 e2       	ldi	r24, 0x29	; 41
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
     ba8:	0a c0       	rjmp	.+20     	; 0xbbe <mostrar_OLED+0x12a>
			}
			else if(!(PIND & (1<<6))){ //Se o pino 6 estiver recebendo 0 mostrará letra D no LCD indicando o modo drive
     baa:	4e 99       	sbic	0x09, 6	; 9
     bac:	08 c0       	rjmp	.+16     	; 0xbbe <mostrar_OLED+0x12a>
				GLCD_GotoXY(90, 50); //Define a posição para escrita
     bae:	62 e3       	ldi	r22, 0x32	; 50
     bb0:	8a e5       	ldi	r24, 0x5A	; 90
     bb2:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
				GLCD_PrintString("D"); //Escreve a string no display OLED
     bb6:	8b e2       	ldi	r24, 0x2B	; 43
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
			}
		}
		*flag2m = 0;
     bbe:	19 82       	std	Y+1, r1	; 0x01
     bc0:	18 82       	st	Y, r1
		GLCD_Render(); //Atualiza a tela do display para exibir o conteúdo
     bc2:	0e 94 2c 08 	call	0x1058	; 0x1058 <GLCD_Render>
	}
	
	if(PINC & (1<<6)){
     bc6:	36 9b       	sbis	0x06, 6	; 6
     bc8:	64 c0       	rjmp	.+200    	; 0xc92 <mostrar_OLED+0x1fe>
		if(*flag2m){
     bca:	88 81       	ld	r24, Y
     bcc:	99 81       	ldd	r25, Y+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <mostrar_OLED+0x140>
     bd2:	5f c0       	rjmp	.+190    	; 0xc92 <mostrar_OLED+0x1fe>
			//Funções para imprimir no display OLED
			GLCD_Clear(); //Apaga o conteúdo para reescrever
     bd4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GLCD_Clear>
		
			GLCD_GotoXY(1, 1); //Define a posição para escrita
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
			GLCD_PrintString("LASD Car"); //Escreve a string no display OLED
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
			GLCD_DrawLine(1,10,48,10,GLCD_Black); //Escreve uma linha abaixo da string
     be8:	0f ef       	ldi	r16, 0xFF	; 255
     bea:	2a e0       	ldi	r18, 0x0A	; 10
     bec:	40 e3       	ldi	r20, 0x30	; 48
     bee:	6a e0       	ldi	r22, 0x0A	; 10
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	0e 94 c3 09 	call	0x1386	; 0x1386 <GLCD_DrawLine>
		
			GLCD_GotoXY(30, 30); //Define a posição para escrita
     bf6:	6e e1       	ldi	r22, 0x1E	; 30
     bf8:	8e e1       	ldi	r24, 0x1E	; 30
     bfa:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
			GLCD_PrintString("Autonomia"); //Escreve a string no display OLED
     bfe:	8d e2       	ldi	r24, 0x2D	; 45
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
			GLCD_GotoXY(40, 40); //Define a posição para escrita
     c06:	68 e2       	ldi	r22, 0x28	; 40
     c08:	88 e2       	ldi	r24, 0x28	; 40
     c0a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
			GLCD_PrintInteger(autonomia); //Escreve o RMP do carro no display OLED
     c0e:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <autonomia>
     c12:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <autonomia+0x1>
     c16:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <autonomia+0x2>
     c1a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <autonomia+0x3>
     c1e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fixsfsi>
     c22:	0e 94 1f 0c 	call	0x183e	; 0x183e <GLCD_PrintInteger>
			GLCD_PrintString("Km"); //Escreve a string no display OLED
     c26:	84 e2       	ldi	r24, 0x24	; 36
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
			
			GLCD_GotoXY(90, 3); //Define a posição para escrita
     c2e:	63 e0       	ldi	r22, 0x03	; 3
     c30:	8a e5       	ldi	r24, 0x5A	; 90
     c32:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
			GLCD_PrintInteger(bateria_proporcional); //Escreve a porcentagem da tensão da bateria no display OLED
     c36:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <bateria_proporcional>
     c3a:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <bateria_proporcional+0x1>
     c3e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <bateria_proporcional+0x2>
     c42:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <bateria_proporcional+0x3>
     c46:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fixsfsi>
     c4a:	0e 94 1f 0c 	call	0x183e	; 0x183e <GLCD_PrintInteger>
			GLCD_PrintString(" %"); //Escreve a string no display OLED
     c4e:	87 e3       	ldi	r24, 0x37	; 55
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
			
			GLCD_GotoXY(90, 16); //Define a posição para escrita
     c56:	60 e1       	ldi	r22, 0x10	; 16
     c58:	8a e5       	ldi	r24, 0x5A	; 90
     c5a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
			GLCD_PrintInteger(temperatura_bateria_proporcional); //Escreve a temperatura da bateria no display OLED
     c5e:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <temperatura_bateria_proporcional>
     c62:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <temperatura_bateria_proporcional+0x1>
     c66:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <temperatura_bateria_proporcional+0x2>
     c6a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <temperatura_bateria_proporcional+0x3>
     c6e:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fixsfsi>
     c72:	0e 94 1f 0c 	call	0x183e	; 0x183e <GLCD_PrintInteger>
			GLCD_PrintString(" C"); //Escreve a string no display OLED
     c76:	8a e3       	ldi	r24, 0x3A	; 58
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
			
			GLCD_DrawRectangle(80,1,124,27,GLCD_Black); //Quadrado bateria e temperatura da bateria
     c7e:	2b e1       	ldi	r18, 0x1B	; 27
     c80:	4c e7       	ldi	r20, 0x7C	; 124
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	80 e5       	ldi	r24, 0x50	; 80
     c86:	0e 94 56 0a 	call	0x14ac	; 0x14ac <GLCD_DrawRectangle>
		
			*flag2m = 0;
     c8a:	19 82       	std	Y+1, r1	; 0x01
     c8c:	18 82       	st	Y, r1
			GLCD_Render(); //Atualiza a tela do display para exibir o conteúdo
     c8e:	0e 94 2c 08 	call	0x1058	; 0x1058 <GLCD_Render>
		}
	}
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	0f 91       	pop	r16
     c98:	08 95       	ret

00000c9a <read_EEPROM>:

void read_EEPROM(){ //Função para ler a memória EEPROM
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
	
	distancia_percorrida_km = eeprom_read_word(0); //Lê a distância percorrida que foi salva na memória
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_word>
     ca6:	ec 01       	movw	r28, r24
     ca8:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <distancia_percorrida_km+0x1>
     cac:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <distancia_percorrida_km>
	tamanho_pneu = eeprom_read_word(2); //Lê o diâmetro do penu que foi salvo na memória
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 3c 10 	call	0x2078	; 0x2078 <eeprom_read_word>
     cb8:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <tamanho_pneu+0x1>
     cbc:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tamanho_pneu>
	temperatura_maxima = eeprom_read_byte(4);
     cc0:	84 e0       	ldi	r24, 0x04	; 4
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	0e 94 34 10 	call	0x2068	; 0x2068 <eeprom_read_byte>
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <temperatura_maxima+0x1>
     cce:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <temperatura_maxima>
	
	distancia_percorrida_cm = distancia_percorrida_km*100000; //Recalculando a distância em cm para não iniciar com zero
     cd2:	de 01       	movw	r26, r28
     cd4:	20 ea       	ldi	r18, 0xA0	; 160
     cd6:	36 e8       	ldi	r19, 0x86	; 134
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__muluhisi3>
     ce0:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <distancia_percorrida_cm>
     ce4:	70 93 7b 01 	sts	0x017B, r23	; 0x80017b <distancia_percorrida_cm+0x1>
     ce8:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <distancia_percorrida_cm+0x2>
     cec:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <distancia_percorrida_cm+0x3>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	bb 0f       	add	r27, r27
     cf6:	88 0b       	sbc	r24, r24
     cf8:	98 2f       	mov	r25, r24
     cfa:	dc 01       	movw	r26, r24
     cfc:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <distancia_percorrida_cm+0x4>
     d00:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <distancia_percorrida_cm+0x5>
     d04:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <distancia_percorrida_cm+0x6>
     d08:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <distancia_percorrida_cm+0x7>
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	08 95       	ret

00000d12 <writ_EEPROM>:

void writ_EEPROM(){ //Função para escrever na memória EEPROM
	
	eeprom_write_word(0, distancia_percorrida_km); //Escreve o valor da distância percorrida na memória
     d12:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <distancia_percorrida_km>
     d16:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <distancia_percorrida_km+0x1>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <eeprom_write_word>
	eeprom_write_word(2, tamanho_pneu); //Escreve o valor do diâmetro do pneu na memória
     d22:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <tamanho_pneu>
     d26:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <tamanho_pneu+0x1>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 50 10 	call	0x20a0	; 0x20a0 <eeprom_write_word>
	eeprom_write_byte(4, temperatura_maxima);
     d32:	60 91 4a 01 	lds	r22, 0x014A	; 0x80014a <temperatura_maxima>
     d36:	84 e0       	ldi	r24, 0x04	; 4
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 42 10 	call	0x2084	; 0x2084 <eeprom_write_byte>
     d3e:	08 95       	ret

00000d40 <main>:
}

int main(void)
{
	//Configuração dos pinos
	DDRB = 0b11111110; //Habilita os pinos PB1 ao PB7 como saídas e o pino PB0 como entrada
     d40:	8e ef       	ldi	r24, 0xFE	; 254
     d42:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b00001011; //Habilita os pinos PD2, PD4, PD5, PD6 e PD7  como entradas e PD0, PD1 e PD3 como saídas
     d44:	8b e0       	ldi	r24, 0x0B	; 11
     d46:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b10111000; //Habilita os pinos PC0, PC1 e PC2 como entrada e o restante dos pinos PC como saídas
     d48:	88 eb       	ldi	r24, 0xB8	; 184
     d4a:	87 b9       	out	0x07, r24	; 7
	
	//Habilitando os resistores de pull-up dos pinos de entrada
	PORTD |= (1<<2); //Habilita o resistor de pull-up do pino PD2
     d4c:	8b b1       	in	r24, 0x0b	; 11
     d4e:	84 60       	ori	r24, 0x04	; 4
     d50:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<4); //Habilita o resistor de pull-up do pino PD4
     d52:	8b b1       	in	r24, 0x0b	; 11
     d54:	80 61       	ori	r24, 0x10	; 16
     d56:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1<<5); //Habilita o resistor de pull-up do pino PD5
     d58:	8b b1       	in	r24, 0x0b	; 11
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1<<0); //Habilita o resistor de pull-up do pino PB0
     d5e:	85 b1       	in	r24, 0x05	; 5
     d60:	81 60       	ori	r24, 0x01	; 1
     d62:	85 b9       	out	0x05, r24	; 5
	
	//Configuração das interrupções
	EIMSK |= 0b00000001; //Habilita a interrupção externa INT0
     d64:	8d b3       	in	r24, 0x1d	; 29
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	8d bb       	out	0x1d, r24	; 29
	EIMSK |= 0b00000010; //Habilita a interrupção externa INT1
     d6a:	8d b3       	in	r24, 0x1d	; 29
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	8d bb       	out	0x1d, r24	; 29
	
	EICRA |= 0b00000010; //Interrupção externa INT0 na borda de descida
     d70:	e9 e6       	ldi	r30, 0x69	; 105
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	82 60       	ori	r24, 0x02	; 2
     d78:	80 83       	st	Z, r24
	EICRA |= 0b00001000; //Interrupção externa INT1 na borda de descida
     d7a:	80 81       	ld	r24, Z
     d7c:	88 60       	ori	r24, 0x08	; 8
     d7e:	80 83       	st	Z, r24
	
	PCICR  = 0b00000100; //Habilita interrupção externa PCINT2 para os pinos PD
     d80:	84 e0       	ldi	r24, 0x04	; 4
     d82:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 = 0b00110000; //Habilita interrupção externa pinos PD4 e PD5
     d86:	90 e3       	ldi	r25, 0x30	; 48
     d88:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	
	//Configuração do timer T0
	TCCR0A = 0b00000010; //Habilita o modo CTC do TC0
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	94 bd       	out	0x24, r25	; 36
	TCCR0B = 0b00000011; //TC0 com prescaler igual a 64
     d90:	23 e0       	ldi	r18, 0x03	; 3
     d92:	25 bd       	out	0x25, r18	; 37
	OCR0A = 249; //Ajusta o comparador para o TC0 contar até 249
     d94:	29 ef       	ldi	r18, 0xF9	; 249
     d96:	27 bd       	out	0x27, r18	; 39
	TIMSK0 = 0b00000010; //Habilita a inturrupção por iguadade comparando com OCR0A. A interrupção ocorre a cada 1ms = (x+1)*64/16MHz, logo x+1 = 250  -> x = 249
     d98:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	//Configuração registradores do ADC
	ADMUX = 0b01000000; // Tensão de referência em VCC com o pino PC0 como fonte do sinal
     d9c:	90 e4       	ldi	r25, 0x40	; 64
     d9e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA= 0b11101111; // Habilita o AD, habilita o trigger automático, modo de conversão contínua e define o prescaler igual a 128
     da2:	9f ee       	ldi	r25, 0xEF	; 239
     da4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB= 0b00000000; // Auto trigger com modo de conversão contínua (ao final de uma conversão outra conversão é imediatamente disparada)
     da8:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00111000; // Habilita os pinos PC0, PC1 e PC2 como fonte de entrada do ADC
     dac:	98 e3       	ldi	r25, 0x38	; 56
     dae:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	//Configuração do timer T2
	TCCR2A = 0b00100011;// Habilita o PWM no modo rápido não invertido para o pino OC0B (pino PD3)
     db2:	93 e2       	ldi	r25, 0x23	; 35
     db4:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000100;// Configura o prescaler
     db8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	//Configuração do timer T1 modo captura
	TCCR1B = (1<<ICES1)|(1<<CS12); //Captura na borda de subida, TC1 com prescaler = 256. Estouro a cada 256*(2^16)/16MHz = (2^16)*16us = 1,04s
     dbc:	84 e4       	ldi	r24, 0x44	; 68
     dbe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = 1<<ICIE1; //Habilita a interrupção por captura
     dc2:	80 e2       	ldi	r24, 0x20	; 32
     dc4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	USART_Init(MYUBRR);
     dc8:	87 e6       	ldi	r24, 0x67	; 103
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <USART_Init>
	
	sei(); //Habilita a chave geral de interrupções (interrupções globais)
     dd0:	78 94       	sei
	
	read_EEPROM(); //Chamando função para ler a memória EEPROM
     dd2:	0e 94 4d 06 	call	0xc9a	; 0xc9a <read_EEPROM>
	
	//Ligando display OLED
	GLCD_Setup(); //Inicializa a biblioteca do display OLED
     dd6:	0e 94 63 08 	call	0x10c6	; 0x10c6 <GLCD_Setup>
	GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite); //Seta a Font5x8
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	48 e0       	ldi	r20, 0x08	; 8
     dde:	65 e0       	ldi	r22, 0x05	; 5
     de0:	88 e6       	ldi	r24, 0x68	; 104
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <GLCD_SetFont>
	GLCD_InvertScreen(); //Inverte a cor de fundo do display OLED para branco
     de8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <GLCD_InvertScreen>
	
	while (1)
	{		
		OCR2B = acelerador_proporcional; //Registrador de comparção, armazena o valor do acelerador e gera o PWM para o pino OC2B
     dec:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <acelerador_proporcional>
     df0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
		
		mostrar_velocidade(&flag1); //Chamando função para imprimir a velocidade no display de 7segmentos
     df4:	84 e4       	ldi	r24, 0x44	; 68
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <mostrar_velocidade>
		
		mostrar_OLED(&flag2); //Chamando função para imprimir as informações (no display OLED) de diâmetro, RPM, distância a um obstáculo, distância percorrida, modo de operação, tensão da bateria e temperatura da bateria
     dfc:	82 e4       	ldi	r24, 0x42	; 66
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	0e 94 4a 05 	call	0xa94	; 0xa94 <mostrar_OLED>
		
		if(flag1){
     e04:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <flag1>
     e08:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <flag1+0x1>
     e0c:	89 2b       	or	r24, r25
     e0e:	71 f3       	breq	.-36     	; 0xdec <main+0xac>
			writ_EEPROM(); //Chamando função para escrever na memória EEPROM
     e10:	0e 94 89 06 	call	0xd12	; 0xd12 <writ_EEPROM>
     e14:	eb cf       	rjmp	.-42     	; 0xdec <main+0xac>

00000e16 <GLCD_BufferWrite>:
			break;

		GLCD_PrintChar(r);
		r = pgm_read_byte(Text++);
	}
}
     e16:	66 95       	lsr	r22
     e18:	66 95       	lsr	r22
     e1a:	66 95       	lsr	r22
     e1c:	e8 2f       	mov	r30, r24
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	68 9f       	mul	r22, r24
     e24:	e0 0d       	add	r30, r0
     e26:	f1 1d       	adc	r31, r1
     e28:	11 24       	eor	r1, r1
     e2a:	e1 57       	subi	r30, 0x71	; 113
     e2c:	fe 4f       	sbci	r31, 0xFE	; 254
     e2e:	40 83       	st	Z, r20
     e30:	08 95       	ret

00000e32 <GLCD_BufferRead>:
     e32:	66 95       	lsr	r22
     e34:	66 95       	lsr	r22
     e36:	66 95       	lsr	r22
     e38:	e8 2f       	mov	r30, r24
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 e8       	ldi	r24, 0x80	; 128
     e3e:	68 9f       	mul	r22, r24
     e40:	e0 0d       	add	r30, r0
     e42:	f1 1d       	adc	r31, r1
     e44:	11 24       	eor	r1, r1
     e46:	e1 57       	subi	r30, 0x71	; 113
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	80 81       	ld	r24, Z
     e4c:	08 95       	ret

00000e4e <Int2bcd>:
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	fa 01       	movw	r30, r20
     e58:	20 e3       	ldi	r18, 0x30	; 48
     e5a:	22 87       	std	Z+10, r18	; 0x0a
     e5c:	21 87       	std	Z+9, r18	; 0x09
     e5e:	20 87       	std	Z+8, r18	; 0x08
     e60:	27 83       	std	Z+7, r18	; 0x07
     e62:	26 83       	std	Z+6, r18	; 0x06
     e64:	25 83       	std	Z+5, r18	; 0x05
     e66:	24 83       	std	Z+4, r18	; 0x04
     e68:	23 83       	std	Z+3, r18	; 0x03
     e6a:	22 83       	std	Z+2, r18	; 0x02
     e6c:	21 83       	std	Z+1, r18	; 0x01
     e6e:	20 83       	st	Z, r18
     e70:	bb 23       	and	r27, r27
     e72:	4c f4       	brge	.+18     	; 0xe86 <Int2bcd+0x38>
     e74:	b0 95       	com	r27
     e76:	a0 95       	com	r26
     e78:	90 95       	com	r25
     e7a:	81 95       	neg	r24
     e7c:	9f 4f       	sbci	r25, 0xFF	; 255
     e7e:	af 4f       	sbci	r26, 0xFF	; 255
     e80:	bf 4f       	sbci	r27, 0xFF	; 255
     e82:	31 e0       	ldi	r19, 0x01	; 1
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <Int2bcd+0x48>
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	06 c0       	rjmp	.+12     	; 0xe96 <Int2bcd+0x48>
     e8a:	9a 5c       	subi	r25, 0xCA	; 202
     e8c:	aa 49       	sbci	r26, 0x9A	; 154
     e8e:	bb 43       	sbci	r27, 0x3B	; 59
     e90:	21 81       	ldd	r18, Z+1	; 0x01
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	21 83       	std	Z+1, r18	; 0x01
     e96:	81 15       	cp	r24, r1
     e98:	2a ec       	ldi	r18, 0xCA	; 202
     e9a:	92 07       	cpc	r25, r18
     e9c:	2a e9       	ldi	r18, 0x9A	; 154
     e9e:	a2 07       	cpc	r26, r18
     ea0:	2b e3       	ldi	r18, 0x3B	; 59
     ea2:	b2 07       	cpc	r27, r18
     ea4:	94 f7       	brge	.-28     	; 0xe8a <Int2bcd+0x3c>
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <Int2bcd+0x66>
     ea8:	91 5e       	subi	r25, 0xE1	; 225
     eaa:	a5 4f       	sbci	r26, 0xF5	; 245
     eac:	b5 40       	sbci	r27, 0x05	; 5
     eae:	22 81       	ldd	r18, Z+2	; 0x02
     eb0:	2f 5f       	subi	r18, 0xFF	; 255
     eb2:	22 83       	std	Z+2, r18	; 0x02
     eb4:	81 15       	cp	r24, r1
     eb6:	21 ee       	ldi	r18, 0xE1	; 225
     eb8:	92 07       	cpc	r25, r18
     eba:	25 ef       	ldi	r18, 0xF5	; 245
     ebc:	a2 07       	cpc	r26, r18
     ebe:	25 e0       	ldi	r18, 0x05	; 5
     ec0:	b2 07       	cpc	r27, r18
     ec2:	94 f7       	brge	.-28     	; 0xea8 <Int2bcd+0x5a>
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <Int2bcd+0x86>
     ec6:	80 58       	subi	r24, 0x80	; 128
     ec8:	96 49       	sbci	r25, 0x96	; 150
     eca:	a8 49       	sbci	r26, 0x98	; 152
     ecc:	b1 09       	sbc	r27, r1
     ece:	23 81       	ldd	r18, Z+3	; 0x03
     ed0:	2f 5f       	subi	r18, 0xFF	; 255
     ed2:	23 83       	std	Z+3, r18	; 0x03
     ed4:	80 38       	cpi	r24, 0x80	; 128
     ed6:	26 e9       	ldi	r18, 0x96	; 150
     ed8:	92 07       	cpc	r25, r18
     eda:	28 e9       	ldi	r18, 0x98	; 152
     edc:	a2 07       	cpc	r26, r18
     ede:	b1 05       	cpc	r27, r1
     ee0:	94 f7       	brge	.-28     	; 0xec6 <Int2bcd+0x78>
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <Int2bcd+0xa4>
     ee4:	80 54       	subi	r24, 0x40	; 64
     ee6:	92 44       	sbci	r25, 0x42	; 66
     ee8:	af 40       	sbci	r26, 0x0F	; 15
     eea:	b1 09       	sbc	r27, r1
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	24 83       	std	Z+4, r18	; 0x04
     ef2:	80 34       	cpi	r24, 0x40	; 64
     ef4:	22 e4       	ldi	r18, 0x42	; 66
     ef6:	92 07       	cpc	r25, r18
     ef8:	2f e0       	ldi	r18, 0x0F	; 15
     efa:	a2 07       	cpc	r26, r18
     efc:	b1 05       	cpc	r27, r1
     efe:	94 f7       	brge	.-28     	; 0xee4 <Int2bcd+0x96>
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <Int2bcd+0xc2>
     f02:	80 5a       	subi	r24, 0xA0	; 160
     f04:	96 48       	sbci	r25, 0x86	; 134
     f06:	a1 40       	sbci	r26, 0x01	; 1
     f08:	b1 09       	sbc	r27, r1
     f0a:	25 81       	ldd	r18, Z+5	; 0x05
     f0c:	2f 5f       	subi	r18, 0xFF	; 255
     f0e:	25 83       	std	Z+5, r18	; 0x05
     f10:	80 3a       	cpi	r24, 0xA0	; 160
     f12:	26 e8       	ldi	r18, 0x86	; 134
     f14:	92 07       	cpc	r25, r18
     f16:	21 e0       	ldi	r18, 0x01	; 1
     f18:	a2 07       	cpc	r26, r18
     f1a:	b1 05       	cpc	r27, r1
     f1c:	94 f7       	brge	.-28     	; 0xf02 <Int2bcd+0xb4>
     f1e:	07 c0       	rjmp	.+14     	; 0xf2e <Int2bcd+0xe0>
     f20:	80 51       	subi	r24, 0x10	; 16
     f22:	97 42       	sbci	r25, 0x27	; 39
     f24:	a1 09       	sbc	r26, r1
     f26:	b1 09       	sbc	r27, r1
     f28:	26 81       	ldd	r18, Z+6	; 0x06
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	26 83       	std	Z+6, r18	; 0x06
     f2e:	80 31       	cpi	r24, 0x10	; 16
     f30:	27 e2       	ldi	r18, 0x27	; 39
     f32:	92 07       	cpc	r25, r18
     f34:	a1 05       	cpc	r26, r1
     f36:	b1 05       	cpc	r27, r1
     f38:	9c f7       	brge	.-26     	; 0xf20 <Int2bcd+0xd2>
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <Int2bcd+0xfc>
     f3c:	88 5e       	subi	r24, 0xE8	; 232
     f3e:	93 40       	sbci	r25, 0x03	; 3
     f40:	a1 09       	sbc	r26, r1
     f42:	b1 09       	sbc	r27, r1
     f44:	27 81       	ldd	r18, Z+7	; 0x07
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	27 83       	std	Z+7, r18	; 0x07
     f4a:	88 3e       	cpi	r24, 0xE8	; 232
     f4c:	23 e0       	ldi	r18, 0x03	; 3
     f4e:	92 07       	cpc	r25, r18
     f50:	a1 05       	cpc	r26, r1
     f52:	b1 05       	cpc	r27, r1
     f54:	9c f7       	brge	.-26     	; 0xf3c <Int2bcd+0xee>
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <Int2bcd+0x118>
     f58:	84 56       	subi	r24, 0x64	; 100
     f5a:	91 09       	sbc	r25, r1
     f5c:	a1 09       	sbc	r26, r1
     f5e:	b1 09       	sbc	r27, r1
     f60:	20 85       	ldd	r18, Z+8	; 0x08
     f62:	2f 5f       	subi	r18, 0xFF	; 255
     f64:	20 87       	std	Z+8, r18	; 0x08
     f66:	84 36       	cpi	r24, 0x64	; 100
     f68:	91 05       	cpc	r25, r1
     f6a:	a1 05       	cpc	r26, r1
     f6c:	b1 05       	cpc	r27, r1
     f6e:	a4 f7       	brge	.-24     	; 0xf58 <Int2bcd+0x10a>
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <Int2bcd+0x130>
     f72:	0a 97       	sbiw	r24, 0x0a	; 10
     f74:	a1 09       	sbc	r26, r1
     f76:	b1 09       	sbc	r27, r1
     f78:	21 85       	ldd	r18, Z+9	; 0x09
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	21 87       	std	Z+9, r18	; 0x09
     f7e:	8a 30       	cpi	r24, 0x0A	; 10
     f80:	91 05       	cpc	r25, r1
     f82:	a1 05       	cpc	r26, r1
     f84:	b1 05       	cpc	r27, r1
     f86:	ac f7       	brge	.-22     	; 0xf72 <Int2bcd+0x124>
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <Int2bcd+0x148>
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	a1 09       	sbc	r26, r1
     f8e:	b1 09       	sbc	r27, r1
     f90:	22 85       	ldd	r18, Z+10	; 0x0a
     f92:	2f 5f       	subi	r18, 0xFF	; 255
     f94:	22 87       	std	Z+10, r18	; 0x0a
     f96:	18 16       	cp	r1, r24
     f98:	19 06       	cpc	r1, r25
     f9a:	1a 06       	cpc	r1, r26
     f9c:	1b 06       	cpc	r1, r27
     f9e:	ac f3       	brlt	.-22     	; 0xf8a <Int2bcd+0x13c>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <Int2bcd+0x158>
     fa4:	2f 5f       	subi	r18, 0xFF	; 255
     fa6:	df 01       	movw	r26, r30
     fa8:	a2 0f       	add	r26, r18
     faa:	b1 1d       	adc	r27, r1
     fac:	8c 91       	ld	r24, X
     fae:	80 33       	cpi	r24, 0x30	; 48
     fb0:	c9 f3       	breq	.-14     	; 0xfa4 <Int2bcd+0x156>
     fb2:	33 23       	and	r19, r19
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <Int2bcd+0x174>
     fb6:	21 50       	subi	r18, 0x01	; 1
     fb8:	df 01       	movw	r26, r30
     fba:	a2 0f       	add	r26, r18
     fbc:	b1 1d       	adc	r27, r1
     fbe:	8d e2       	ldi	r24, 0x2D	; 45
     fc0:	8c 93       	st	X, r24
     fc2:	4a e0       	ldi	r20, 0x0A	; 10
     fc4:	42 1b       	sub	r20, r18
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <Int2bcd+0x196>
     fca:	83 2f       	mov	r24, r19
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	ef 01       	movw	r28, r30
     fd0:	c8 0f       	add	r28, r24
     fd2:	d9 1f       	adc	r29, r25
     fd4:	82 0f       	add	r24, r18
     fd6:	91 1d       	adc	r25, r1
     fd8:	df 01       	movw	r26, r30
     fda:	a8 0f       	add	r26, r24
     fdc:	b9 1f       	adc	r27, r25
     fde:	8c 91       	ld	r24, X
     fe0:	88 83       	st	Y, r24
     fe2:	3f 5f       	subi	r19, 0xFF	; 255
     fe4:	43 17       	cp	r20, r19
     fe6:	88 f7       	brcc	.-30     	; 0xfca <Int2bcd+0x17c>
     fe8:	e3 0f       	add	r30, r19
     fea:	f1 1d       	adc	r31, r1
     fec:	10 82       	st	Z, r1
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <GLCD_Send>:
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	c8 2f       	mov	r28, r24
     ffe:	8b 01       	movw	r16, r22
    1000:	d4 2f       	mov	r29, r20
    1002:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <TWI_BeginTransmission>
    1006:	88 e7       	ldi	r24, 0x78	; 120
    1008:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <TWI_Transmit>
    100c:	8c 2f       	mov	r24, r28
    100e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <TWI_Transmit>
    1012:	c0 e0       	ldi	r28, 0x00	; 0
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <GLCD_Send+0x30>
    1016:	f8 01       	movw	r30, r16
    1018:	ec 0f       	add	r30, r28
    101a:	f1 1d       	adc	r31, r1
    101c:	80 81       	ld	r24, Z
    101e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <TWI_Transmit>
    1022:	cf 5f       	subi	r28, 0xFF	; 255
    1024:	cd 17       	cp	r28, r29
    1026:	b8 f3       	brcs	.-18     	; 0x1016 <GLCD_Send+0x22>
    1028:	0e 94 76 0c 	call	0x18ec	; 0x18ec <TWI_EndTransmission>
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <GLCD_SendCommand>:
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	1f 92       	push	r1
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	be 01       	movw	r22, r28
    1046:	6f 5f       	subi	r22, 0xFF	; 255
    1048:	7f 4f       	sbci	r23, 0xFF	; 255
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	0e 94 fa 07 	call	0xff4	; 0xff4 <GLCD_Send>
    1050:	0f 90       	pop	r0
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <GLCD_Render>:
    1058:	cf 93       	push	r28
    105a:	81 e2       	ldi	r24, 0x21	; 33
    105c:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1066:	8f e7       	ldi	r24, 0x7F	; 127
    1068:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    106c:	82 e2       	ldi	r24, 0x22	; 34
    106e:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1078:	87 e0       	ldi	r24, 0x07	; 7
    107a:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    107e:	c0 e0       	ldi	r28, 0x00	; 0
    1080:	0b c0       	rjmp	.+22     	; 0x1098 <GLCD_Render+0x40>
    1082:	80 e1       	ldi	r24, 0x10	; 16
    1084:	c8 9f       	mul	r28, r24
    1086:	b0 01       	movw	r22, r0
    1088:	11 24       	eor	r1, r1
    108a:	61 57       	subi	r22, 0x71	; 113
    108c:	7e 4f       	sbci	r23, 0xFE	; 254
    108e:	40 e1       	ldi	r20, 0x10	; 16
    1090:	80 e4       	ldi	r24, 0x40	; 64
    1092:	0e 94 fa 07 	call	0xff4	; 0xff4 <GLCD_Send>
    1096:	cf 5f       	subi	r28, 0xFF	; 255
    1098:	c0 34       	cpi	r28, 0x40	; 64
    109a:	98 f3       	brcs	.-26     	; 0x1082 <GLCD_Render+0x2a>
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <GLCD_GotoX>:
    10a0:	88 23       	and	r24, r24
    10a2:	14 f0       	brlt	.+4      	; 0x10a8 <GLCD_GotoX+0x8>
    10a4:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__GLCD>
    10a8:	08 95       	ret

000010aa <GLCD_GotoY>:
    10aa:	80 34       	cpi	r24, 0x40	; 64
    10ac:	10 f4       	brcc	.+4      	; 0x10b2 <GLCD_GotoY+0x8>
    10ae:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <__GLCD+0x1>
    10b2:	08 95       	ret

000010b4 <GLCD_GotoXY>:
    10b4:	cf 93       	push	r28
    10b6:	c6 2f       	mov	r28, r22
    10b8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <GLCD_GotoX>
    10bc:	8c 2f       	mov	r24, r28
    10be:	0e 94 55 08 	call	0x10aa	; 0x10aa <GLCD_GotoY>
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret

000010c6 <GLCD_Setup>:
    10c6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <TWI_Setup>
    10ca:	8e ea       	ldi	r24, 0xAE	; 174
    10cc:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10d0:	85 ed       	ldi	r24, 0xD5	; 213
    10d2:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10d6:	80 ef       	ldi	r24, 0xF0	; 240
    10d8:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10dc:	88 ea       	ldi	r24, 0xA8	; 168
    10de:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10e2:	8f e3       	ldi	r24, 0x3F	; 63
    10e4:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10e8:	83 ed       	ldi	r24, 0xD3	; 211
    10ea:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10f4:	8d e8       	ldi	r24, 0x8D	; 141
    10f6:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    10fa:	84 e1       	ldi	r24, 0x14	; 20
    10fc:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1100:	80 e4       	ldi	r24, 0x40	; 64
    1102:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1106:	80 e2       	ldi	r24, 0x20	; 32
    1108:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1112:	81 ea       	ldi	r24, 0xA1	; 161
    1114:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    111e:	8a ed       	ldi	r24, 0xDA	; 218
    1120:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1124:	82 e1       	ldi	r24, 0x12	; 18
    1126:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    112a:	81 e8       	ldi	r24, 0x81	; 129
    112c:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1136:	89 ed       	ldi	r24, 0xD9	; 217
    1138:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    113c:	81 ef       	ldi	r24, 0xF1	; 241
    113e:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1142:	8b ed       	ldi	r24, 0xDB	; 219
    1144:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1148:	80 e2       	ldi	r24, 0x20	; 32
    114a:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    114e:	84 ea       	ldi	r24, 0xA4	; 164
    1150:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1154:	86 ea       	ldi	r24, 0xA6	; 166
    1156:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    115a:	8e e2       	ldi	r24, 0x2E	; 46
    115c:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1160:	8f ea       	ldi	r24, 0xAF	; 175
    1162:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	80 e0       	ldi	r24, 0x00	; 0
    116a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    116e:	e6 e8       	ldi	r30, 0x86	; 134
    1170:	f1 e0       	ldi	r31, 0x01	; 1
    1172:	86 ea       	ldi	r24, 0xA6	; 166
    1174:	82 83       	std	Z+2, r24	; 0x02
    1176:	17 82       	std	Z+7, r1	; 0x07
    1178:	16 82       	std	Z+6, r1	; 0x06
    117a:	15 82       	std	Z+5, r1	; 0x05
    117c:	11 82       	std	Z+1, r1	; 0x01
    117e:	10 82       	st	Z, r1
    1180:	08 95       	ret

00001182 <GLCD_SetPixel>:
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	1f 93       	push	r17
    1188:	cf 93       	push	r28
    118a:	df 93       	push	r29
    118c:	c6 2f       	mov	r28, r22
    118e:	14 2f       	mov	r17, r20
    1190:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    1194:	e6 e8       	ldi	r30, 0x86	; 134
    1196:	f1 e0       	ldi	r31, 0x01	; 1
    1198:	f1 80       	ldd	r15, Z+1	; 0x01
    119a:	d0 81       	ld	r29, Z
    119c:	6f 2d       	mov	r22, r15
    119e:	8d 2f       	mov	r24, r29
    11a0:	0e 94 19 07 	call	0xe32	; 0xe32 <GLCD_BufferRead>
    11a4:	1f 3f       	cpi	r17, 0xFF	; 255
    11a6:	79 f4       	brne	.+30     	; 0x11c6 <GLCD_SetPixel+0x44>
    11a8:	c7 70       	andi	r28, 0x07	; 7
    11aa:	01 e0       	ldi	r16, 0x01	; 1
    11ac:	10 e0       	ldi	r17, 0x00	; 0
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	04 c0       	rjmp	.+8      	; 0x11bc <GLCD_SetPixel+0x3a>
    11b4:	00 0f       	add	r16, r16
    11b6:	11 1f       	adc	r17, r17
    11b8:	22 1f       	adc	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	ca 95       	dec	r28
    11be:	d2 f7       	brpl	.-12     	; 0x11b4 <GLCD_SetPixel+0x32>
    11c0:	48 2f       	mov	r20, r24
    11c2:	40 2b       	or	r20, r16
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <GLCD_SetPixel+0x62>
    11c6:	c7 70       	andi	r28, 0x07	; 7
    11c8:	01 e0       	ldi	r16, 0x01	; 1
    11ca:	10 e0       	ldi	r17, 0x00	; 0
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <GLCD_SetPixel+0x58>
    11d2:	00 0f       	add	r16, r16
    11d4:	11 1f       	adc	r17, r17
    11d6:	22 1f       	adc	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	ca 95       	dec	r28
    11dc:	d2 f7       	brpl	.-12     	; 0x11d2 <GLCD_SetPixel+0x50>
    11de:	00 95       	com	r16
    11e0:	40 2f       	mov	r20, r16
    11e2:	48 23       	and	r20, r24
    11e4:	6f 2d       	mov	r22, r15
    11e6:	8d 2f       	mov	r24, r29
    11e8:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	08 95       	ret

000011f8 <GLCD_SetPixels>:
    11f8:	6f 92       	push	r6
    11fa:	7f 92       	push	r7
    11fc:	8f 92       	push	r8
    11fe:	9f 92       	push	r9
    1200:	af 92       	push	r10
    1202:	bf 92       	push	r11
    1204:	cf 92       	push	r12
    1206:	df 92       	push	r13
    1208:	ef 92       	push	r14
    120a:	ff 92       	push	r15
    120c:	0f 93       	push	r16
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	88 23       	and	r24, r24
    1216:	0c f4       	brge	.+2      	; 0x121a <GLCD_SetPixels+0x22>
    1218:	a7 c0       	rjmp	.+334    	; 0x1368 <GLCD_SetPixels+0x170>
    121a:	44 23       	and	r20, r20
    121c:	0c f4       	brge	.+2      	; 0x1220 <GLCD_SetPixels+0x28>
    121e:	a4 c0       	rjmp	.+328    	; 0x1368 <GLCD_SetPixels+0x170>
    1220:	60 34       	cpi	r22, 0x40	; 64
    1222:	08 f0       	brcs	.+2      	; 0x1226 <GLCD_SetPixels+0x2e>
    1224:	a1 c0       	rjmp	.+322    	; 0x1368 <GLCD_SetPixels+0x170>
    1226:	20 34       	cpi	r18, 0x40	; 64
    1228:	08 f0       	brcs	.+2      	; 0x122c <GLCD_SetPixels+0x34>
    122a:	9e c0       	rjmp	.+316    	; 0x1368 <GLCD_SetPixels+0x170>
    122c:	26 1b       	sub	r18, r22
    122e:	99 24       	eor	r9, r9
    1230:	93 94       	inc	r9
    1232:	92 0e       	add	r9, r18
    1234:	48 1b       	sub	r20, r24
    1236:	d1 e0       	ldi	r29, 0x01	; 1
    1238:	d4 0f       	add	r29, r20
    123a:	96 2f       	mov	r25, r22
    123c:	97 70       	andi	r25, 0x07	; 7
    123e:	16 2f       	mov	r17, r22
    1240:	19 1b       	sub	r17, r25
    1242:	e9 2c       	mov	r14, r9
    1244:	f1 2c       	mov	r15, r1
    1246:	28 e0       	ldi	r18, 0x08	; 8
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	29 1b       	sub	r18, r25
    124c:	31 09       	sbc	r19, r1
    124e:	e2 16       	cp	r14, r18
    1250:	f3 06       	cpc	r15, r19
    1252:	7c f4       	brge	.+30     	; 0x1272 <GLCD_SetPixels+0x7a>
    1254:	28 e0       	ldi	r18, 0x08	; 8
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	2e 19       	sub	r18, r14
    125a:	3f 09       	sbc	r19, r15
    125c:	4f ef       	ldi	r20, 0xFF	; 255
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	6a 01       	movw	r12, r20
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GLCD_SetPixels+0x70>
    1264:	d5 94       	asr	r13
    1266:	c7 94       	ror	r12
    1268:	2a 95       	dec	r18
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GLCD_SetPixels+0x6c>
    126c:	2c 2d       	mov	r18, r12
    126e:	b9 2c       	mov	r11, r9
    1270:	04 c0       	rjmp	.+8      	; 0x127a <GLCD_SetPixels+0x82>
    1272:	28 e0       	ldi	r18, 0x08	; 8
    1274:	b2 2e       	mov	r11, r18
    1276:	b9 1a       	sub	r11, r25
    1278:	2f ef       	ldi	r18, 0xFF	; 255
    127a:	a8 2e       	mov	r10, r24
    127c:	c2 2e       	mov	r12, r18
    127e:	d1 2c       	mov	r13, r1
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <GLCD_SetPixels+0x8e>
    1282:	cc 0c       	add	r12, r12
    1284:	dd 1c       	adc	r13, r13
    1286:	9a 95       	dec	r25
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <GLCD_SetPixels+0x8a>
    128a:	6c 2c       	mov	r6, r12
    128c:	61 2f       	mov	r22, r17
    128e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    1292:	81 2c       	mov	r8, r1
    1294:	19 c0       	rjmp	.+50     	; 0x12c8 <GLCD_SetPixels+0xd0>
    1296:	e6 e8       	ldi	r30, 0x86	; 134
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	71 80       	ldd	r7, Z+1	; 0x01
    129c:	c0 81       	ld	r28, Z
    129e:	67 2d       	mov	r22, r7
    12a0:	8c 2f       	mov	r24, r28
    12a2:	0e 94 19 07 	call	0xe32	; 0xe32 <GLCD_BufferRead>
    12a6:	0f 3f       	cpi	r16, 0xFF	; 255
    12a8:	19 f4       	brne	.+6      	; 0x12b0 <GLCD_SetPixels+0xb8>
    12aa:	46 2d       	mov	r20, r6
    12ac:	48 2b       	or	r20, r24
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <GLCD_SetPixels+0xbe>
    12b0:	4c 2d       	mov	r20, r12
    12b2:	40 95       	com	r20
    12b4:	48 23       	and	r20, r24
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	8c 0f       	add	r24, r28
    12ba:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__GLCD>
    12be:	67 2d       	mov	r22, r7
    12c0:	8c 2f       	mov	r24, r28
    12c2:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    12c6:	83 94       	inc	r8
    12c8:	8d 16       	cp	r8, r29
    12ca:	28 f3       	brcs	.-54     	; 0x1296 <GLCD_SetPixels+0x9e>
    12cc:	16 c0       	rjmp	.+44     	; 0x12fa <GLCD_SetPixels+0x102>
    12ce:	88 e0       	ldi	r24, 0x08	; 8
    12d0:	b8 0e       	add	r11, r24
    12d2:	18 5f       	subi	r17, 0xF8	; 248
    12d4:	61 2f       	mov	r22, r17
    12d6:	8a 2d       	mov	r24, r10
    12d8:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    12dc:	c0 e0       	ldi	r28, 0x00	; 0
    12de:	0b c0       	rjmp	.+22     	; 0x12f6 <GLCD_SetPixels+0xfe>
    12e0:	e6 e8       	ldi	r30, 0x86	; 134
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	61 81       	ldd	r22, Z+1	; 0x01
    12e6:	80 81       	ld	r24, Z
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	98 0f       	add	r25, r24
    12ec:	90 83       	st	Z, r25
    12ee:	40 2f       	mov	r20, r16
    12f0:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    12f4:	cf 5f       	subi	r28, 0xFF	; 255
    12f6:	cd 17       	cp	r28, r29
    12f8:	98 f3       	brcs	.-26     	; 0x12e0 <GLCD_SetPixels+0xe8>
    12fa:	8b 2d       	mov	r24, r11
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	9c 01       	movw	r18, r24
    1300:	28 5f       	subi	r18, 0xF8	; 248
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	e2 16       	cp	r14, r18
    1306:	f3 06       	cpc	r15, r19
    1308:	14 f7       	brge	.-60     	; 0x12ce <GLCD_SetPixels+0xd6>
    130a:	b9 14       	cp	r11, r9
    130c:	68 f5       	brcc	.+90     	; 0x1368 <GLCD_SetPixels+0x170>
    130e:	e8 1a       	sub	r14, r24
    1310:	f9 0a       	sbc	r15, r25
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 c0       	rjmp	.+4      	; 0x131c <GLCD_SetPixels+0x124>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	ea 94       	dec	r14
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <GLCD_SetPixels+0x120>
    1320:	e8 2e       	mov	r14, r24
    1322:	e0 94       	com	r14
    1324:	68 e0       	ldi	r22, 0x08	; 8
    1326:	61 0f       	add	r22, r17
    1328:	8a 2d       	mov	r24, r10
    132a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	19 c0       	rjmp	.+50     	; 0x1364 <GLCD_SetPixels+0x16c>
    1332:	e6 e8       	ldi	r30, 0x86	; 134
    1334:	f1 e0       	ldi	r31, 0x01	; 1
    1336:	f1 80       	ldd	r15, Z+1	; 0x01
    1338:	c0 81       	ld	r28, Z
    133a:	6f 2d       	mov	r22, r15
    133c:	8c 2f       	mov	r24, r28
    133e:	0e 94 19 07 	call	0xe32	; 0xe32 <GLCD_BufferRead>
    1342:	0f 3f       	cpi	r16, 0xFF	; 255
    1344:	19 f4       	brne	.+6      	; 0x134c <GLCD_SetPixels+0x154>
    1346:	4e 2d       	mov	r20, r14
    1348:	48 2b       	or	r20, r24
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <GLCD_SetPixels+0x15a>
    134c:	4e 2d       	mov	r20, r14
    134e:	40 95       	com	r20
    1350:	48 23       	and	r20, r24
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	8c 0f       	add	r24, r28
    1356:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <__GLCD>
    135a:	6f 2d       	mov	r22, r15
    135c:	8c 2f       	mov	r24, r28
    135e:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    1362:	1f 5f       	subi	r17, 0xFF	; 255
    1364:	1d 17       	cp	r17, r29
    1366:	28 f3       	brcs	.-54     	; 0x1332 <GLCD_SetPixels+0x13a>
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	bf 90       	pop	r11
    137a:	af 90       	pop	r10
    137c:	9f 90       	pop	r9
    137e:	8f 90       	pop	r8
    1380:	7f 90       	pop	r7
    1382:	6f 90       	pop	r6
    1384:	08 95       	ret

00001386 <GLCD_DrawLine>:
    1386:	8f 92       	push	r8
    1388:	9f 92       	push	r9
    138a:	af 92       	push	r10
    138c:	bf 92       	push	r11
    138e:	cf 92       	push	r12
    1390:	df 92       	push	r13
    1392:	ef 92       	push	r14
    1394:	ff 92       	push	r15
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
    139e:	c8 2f       	mov	r28, r24
    13a0:	d6 2f       	mov	r29, r22
    13a2:	14 2f       	mov	r17, r20
    13a4:	88 23       	and	r24, r24
    13a6:	0c f4       	brge	.+2      	; 0x13aa <GLCD_DrawLine+0x24>
    13a8:	74 c0       	rjmp	.+232    	; 0x1492 <GLCD_DrawLine+0x10c>
    13aa:	44 23       	and	r20, r20
    13ac:	0c f4       	brge	.+2      	; 0x13b0 <GLCD_DrawLine+0x2a>
    13ae:	71 c0       	rjmp	.+226    	; 0x1492 <GLCD_DrawLine+0x10c>
    13b0:	60 34       	cpi	r22, 0x40	; 64
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <GLCD_DrawLine+0x30>
    13b4:	6e c0       	rjmp	.+220    	; 0x1492 <GLCD_DrawLine+0x10c>
    13b6:	20 34       	cpi	r18, 0x40	; 64
    13b8:	08 f0       	brcs	.+2      	; 0x13bc <GLCD_DrawLine+0x36>
    13ba:	6b c0       	rjmp	.+214    	; 0x1492 <GLCD_DrawLine+0x10c>
    13bc:	84 13       	cpse	r24, r20
    13be:	0a c0       	rjmp	.+20     	; 0x13d4 <GLCD_DrawLine+0x4e>
    13c0:	26 17       	cp	r18, r22
    13c2:	10 f4       	brcc	.+4      	; 0x13c8 <GLCD_DrawLine+0x42>
    13c4:	d2 2f       	mov	r29, r18
    13c6:	26 2f       	mov	r18, r22
    13c8:	4c 2f       	mov	r20, r28
    13ca:	6d 2f       	mov	r22, r29
    13cc:	8c 2f       	mov	r24, r28
    13ce:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <GLCD_SetPixels>
    13d2:	5f c0       	rjmp	.+190    	; 0x1492 <GLCD_DrawLine+0x10c>
    13d4:	62 13       	cpse	r22, r18
    13d6:	0e c0       	rjmp	.+28     	; 0x13f4 <GLCD_DrawLine+0x6e>
    13d8:	48 17       	cp	r20, r24
    13da:	48 f4       	brcc	.+18     	; 0x13ee <GLCD_DrawLine+0x68>
    13dc:	c4 2f       	mov	r28, r20
    13de:	18 2f       	mov	r17, r24
    13e0:	06 c0       	rjmp	.+12     	; 0x13ee <GLCD_DrawLine+0x68>
    13e2:	40 2f       	mov	r20, r16
    13e4:	6d 2f       	mov	r22, r29
    13e6:	8c 2f       	mov	r24, r28
    13e8:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLCD_SetPixel>
    13ec:	cf 5f       	subi	r28, 0xFF	; 255
    13ee:	1c 17       	cp	r17, r28
    13f0:	c0 f7       	brcc	.-16     	; 0x13e2 <GLCD_DrawLine+0x5c>
    13f2:	4f c0       	rjmp	.+158    	; 0x1492 <GLCD_DrawLine+0x10c>
    13f4:	26 17       	cp	r18, r22
    13f6:	28 f4       	brcc	.+10     	; 0x1402 <GLCD_DrawLine+0x7c>
    13f8:	c6 2e       	mov	r12, r22
    13fa:	d1 2c       	mov	r13, r1
    13fc:	c2 1a       	sub	r12, r18
    13fe:	d1 08       	sbc	r13, r1
    1400:	04 c0       	rjmp	.+8      	; 0x140a <GLCD_DrawLine+0x84>
    1402:	c2 2e       	mov	r12, r18
    1404:	d1 2c       	mov	r13, r1
    1406:	c6 1a       	sub	r12, r22
    1408:	d1 08       	sbc	r13, r1
    140a:	1c 17       	cp	r17, r28
    140c:	28 f4       	brcc	.+10     	; 0x1418 <GLCD_DrawLine+0x92>
    140e:	ac 2e       	mov	r10, r28
    1410:	b1 2c       	mov	r11, r1
    1412:	a1 1a       	sub	r10, r17
    1414:	b1 08       	sbc	r11, r1
    1416:	04 c0       	rjmp	.+8      	; 0x1420 <GLCD_DrawLine+0x9a>
    1418:	a1 2e       	mov	r10, r17
    141a:	b1 2c       	mov	r11, r1
    141c:	ac 1a       	sub	r10, r28
    141e:	b1 08       	sbc	r11, r1
    1420:	ac 14       	cp	r10, r12
    1422:	bd 04       	cpc	r11, r13
    1424:	34 f4       	brge	.+12     	; 0x1432 <GLCD_DrawLine+0xac>
    1426:	81 2f       	mov	r24, r17
    1428:	12 2f       	mov	r17, r18
    142a:	28 2f       	mov	r18, r24
    142c:	8c 2f       	mov	r24, r28
    142e:	cd 2f       	mov	r28, r29
    1430:	d8 2f       	mov	r29, r24
    1432:	1c 17       	cp	r17, r28
    1434:	30 f4       	brcc	.+12     	; 0x1442 <GLCD_DrawLine+0xbc>
    1436:	8d 2f       	mov	r24, r29
    1438:	d2 2f       	mov	r29, r18
    143a:	28 2f       	mov	r18, r24
    143c:	8c 2f       	mov	r24, r28
    143e:	c1 2f       	mov	r28, r17
    1440:	18 2f       	mov	r17, r24
    1442:	91 2e       	mov	r9, r17
    1444:	9c 1a       	sub	r9, r28
    1446:	d2 17       	cp	r29, r18
    1448:	18 f4       	brcc	.+6      	; 0x1450 <GLCD_DrawLine+0xca>
    144a:	e2 2e       	mov	r14, r18
    144c:	ed 1a       	sub	r14, r29
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <GLCD_DrawLine+0xce>
    1450:	ed 2e       	mov	r14, r29
    1452:	e2 1a       	sub	r14, r18
    1454:	f9 2c       	mov	r15, r9
    1456:	f6 94       	lsr	r15
    1458:	d2 17       	cp	r29, r18
    145a:	18 f4       	brcc	.+6      	; 0x1462 <GLCD_DrawLine+0xdc>
    145c:	88 24       	eor	r8, r8
    145e:	83 94       	inc	r8
    1460:	16 c0       	rjmp	.+44     	; 0x148e <GLCD_DrawLine+0x108>
    1462:	88 24       	eor	r8, r8
    1464:	8a 94       	dec	r8
    1466:	13 c0       	rjmp	.+38     	; 0x148e <GLCD_DrawLine+0x108>
    1468:	ac 14       	cp	r10, r12
    146a:	bd 04       	cpc	r11, r13
    146c:	34 f4       	brge	.+12     	; 0x147a <GLCD_DrawLine+0xf4>
    146e:	40 2f       	mov	r20, r16
    1470:	6c 2f       	mov	r22, r28
    1472:	8d 2f       	mov	r24, r29
    1474:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLCD_SetPixel>
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <GLCD_DrawLine+0xfe>
    147a:	40 2f       	mov	r20, r16
    147c:	6d 2f       	mov	r22, r29
    147e:	8c 2f       	mov	r24, r28
    1480:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLCD_SetPixel>
    1484:	fe 18       	sub	r15, r14
    1486:	12 f4       	brpl	.+4      	; 0x148c <GLCD_DrawLine+0x106>
    1488:	d8 0d       	add	r29, r8
    148a:	f9 0c       	add	r15, r9
    148c:	cf 5f       	subi	r28, 0xFF	; 255
    148e:	1c 17       	cp	r17, r28
    1490:	58 f7       	brcc	.-42     	; 0x1468 <GLCD_DrawLine+0xe2>
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	ef 90       	pop	r14
    149e:	df 90       	pop	r13
    14a0:	cf 90       	pop	r12
    14a2:	bf 90       	pop	r11
    14a4:	af 90       	pop	r10
    14a6:	9f 90       	pop	r9
    14a8:	8f 90       	pop	r8
    14aa:	08 95       	ret

000014ac <GLCD_DrawRectangle>:
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	88 23       	and	r24, r24
    14bc:	0c f4       	brge	.+2      	; 0x14c0 <GLCD_DrawRectangle+0x14>
    14be:	45 c0       	rjmp	.+138    	; 0x154a <GLCD_DrawRectangle+0x9e>
    14c0:	44 23       	and	r20, r20
    14c2:	0c f4       	brge	.+2      	; 0x14c6 <GLCD_DrawRectangle+0x1a>
    14c4:	42 c0       	rjmp	.+132    	; 0x154a <GLCD_DrawRectangle+0x9e>
    14c6:	60 34       	cpi	r22, 0x40	; 64
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <GLCD_DrawRectangle+0x20>
    14ca:	3f c0       	rjmp	.+126    	; 0x154a <GLCD_DrawRectangle+0x9e>
    14cc:	20 34       	cpi	r18, 0x40	; 64
    14ce:	e8 f5       	brcc	.+122    	; 0x154a <GLCD_DrawRectangle+0x9e>
    14d0:	d0 2f       	mov	r29, r16
    14d2:	12 2f       	mov	r17, r18
    14d4:	d4 2e       	mov	r13, r20
    14d6:	f6 2e       	mov	r15, r22
    14d8:	e8 2e       	mov	r14, r24
    14da:	48 17       	cp	r20, r24
    14dc:	18 f0       	brcs	.+6      	; 0x14e4 <GLCD_DrawRectangle+0x38>
    14de:	04 2f       	mov	r16, r20
    14e0:	c8 2f       	mov	r28, r24
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <GLCD_DrawRectangle+0x4a>
    14e4:	08 2f       	mov	r16, r24
    14e6:	c4 2f       	mov	r28, r20
    14e8:	06 c0       	rjmp	.+12     	; 0x14f6 <GLCD_DrawRectangle+0x4a>
    14ea:	4d 2f       	mov	r20, r29
    14ec:	6f 2d       	mov	r22, r15
    14ee:	8c 2f       	mov	r24, r28
    14f0:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLCD_SetPixel>
    14f4:	cf 5f       	subi	r28, 0xFF	; 255
    14f6:	0c 17       	cp	r16, r28
    14f8:	c0 f7       	brcc	.-16     	; 0x14ea <GLCD_DrawRectangle+0x3e>
    14fa:	de 14       	cp	r13, r14
    14fc:	18 f0       	brcs	.+6      	; 0x1504 <GLCD_DrawRectangle+0x58>
    14fe:	0d 2d       	mov	r16, r13
    1500:	ce 2d       	mov	r28, r14
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <GLCD_DrawRectangle+0x6a>
    1504:	0e 2d       	mov	r16, r14
    1506:	cd 2d       	mov	r28, r13
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <GLCD_DrawRectangle+0x6a>
    150a:	4d 2f       	mov	r20, r29
    150c:	61 2f       	mov	r22, r17
    150e:	8c 2f       	mov	r24, r28
    1510:	0e 94 c1 08 	call	0x1182	; 0x1182 <GLCD_SetPixel>
    1514:	cf 5f       	subi	r28, 0xFF	; 255
    1516:	0c 17       	cp	r16, r28
    1518:	c0 f7       	brcc	.-16     	; 0x150a <GLCD_DrawRectangle+0x5e>
    151a:	1f 15       	cp	r17, r15
    151c:	18 f0       	brcs	.+6      	; 0x1524 <GLCD_DrawRectangle+0x78>
    151e:	21 2f       	mov	r18, r17
    1520:	6f 2d       	mov	r22, r15
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <GLCD_DrawRectangle+0x7c>
    1524:	2f 2d       	mov	r18, r15
    1526:	61 2f       	mov	r22, r17
    1528:	0d 2f       	mov	r16, r29
    152a:	4e 2d       	mov	r20, r14
    152c:	8e 2d       	mov	r24, r14
    152e:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <GLCD_SetPixels>
    1532:	1f 15       	cp	r17, r15
    1534:	18 f0       	brcs	.+6      	; 0x153c <GLCD_DrawRectangle+0x90>
    1536:	21 2f       	mov	r18, r17
    1538:	6f 2d       	mov	r22, r15
    153a:	02 c0       	rjmp	.+4      	; 0x1540 <GLCD_DrawRectangle+0x94>
    153c:	2f 2d       	mov	r18, r15
    153e:	61 2f       	mov	r22, r17
    1540:	0d 2f       	mov	r16, r29
    1542:	4d 2d       	mov	r20, r13
    1544:	8d 2d       	mov	r24, r13
    1546:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <GLCD_SetPixels>
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	df 90       	pop	r13
    1558:	08 95       	ret

0000155a <GLCD_FillScreen>:
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	18 2f       	mov	r17, r24
    1562:	d0 e0       	ldi	r29, 0x00	; 0
    1564:	0b c0       	rjmp	.+22     	; 0x157c <GLCD_FillScreen+0x22>
    1566:	41 2f       	mov	r20, r17
    1568:	6d 2f       	mov	r22, r29
    156a:	8c 2f       	mov	r24, r28
    156c:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    1570:	cf 5f       	subi	r28, 0xFF	; 255
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <GLCD_FillScreen+0x1c>
    1574:	c0 e0       	ldi	r28, 0x00	; 0
    1576:	cc 23       	and	r28, r28
    1578:	b4 f7       	brge	.-20     	; 0x1566 <GLCD_FillScreen+0xc>
    157a:	d8 5f       	subi	r29, 0xF8	; 248
    157c:	d0 34       	cpi	r29, 0x40	; 64
    157e:	d0 f3       	brcs	.-12     	; 0x1574 <GLCD_FillScreen+0x1a>
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	08 95       	ret

00001588 <GLCD_Clear>:
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	0e 94 ad 0a 	call	0x155a	; 0x155a <GLCD_FillScreen>
    158e:	08 95       	ret

00001590 <GLCD_InvertScreen>:
    1590:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__GLCD+0x2>
    1594:	87 3a       	cpi	r24, 0xA7	; 167
    1596:	21 f4       	brne	.+8      	; 0x15a0 <GLCD_InvertScreen+0x10>
    1598:	86 ea       	ldi	r24, 0xA6	; 166
    159a:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__GLCD+0x2>
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <GLCD_InvertScreen+0x16>
    15a0:	87 ea       	ldi	r24, 0xA7	; 167
    15a2:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <__GLCD+0x2>
    15a6:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__GLCD+0x2>
    15aa:	0e 94 1b 08 	call	0x1036	; 0x1036 <GLCD_SendCommand>
    15ae:	08 95       	ret

000015b0 <GLCD_SetFont>:
    15b0:	66 23       	and	r22, r22
    15b2:	e4 f0       	brlt	.+56     	; 0x15ec <GLCD_SetFont+0x3c>
    15b4:	40 34       	cpi	r20, 0x40	; 64
    15b6:	d0 f4       	brcc	.+52     	; 0x15ec <GLCD_SetFont+0x3c>
    15b8:	22 30       	cpi	r18, 0x02	; 2
    15ba:	c0 f4       	brcc	.+48     	; 0x15ec <GLCD_SetFont+0x3c>
    15bc:	e6 e8       	ldi	r30, 0x86	; 134
    15be:	f1 e0       	ldi	r31, 0x01	; 1
    15c0:	94 83       	std	Z+4, r25	; 0x04
    15c2:	83 83       	std	Z+3, r24	; 0x03
    15c4:	65 83       	std	Z+5, r22	; 0x05
    15c6:	46 83       	std	Z+6, r20	; 0x06
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	41 50       	subi	r20, 0x01	; 1
    15cc:	51 09       	sbc	r21, r1
    15ce:	ca 01       	movw	r24, r20
    15d0:	99 23       	and	r25, r25
    15d2:	0c f4       	brge	.+2      	; 0x15d6 <GLCD_SetFont+0x26>
    15d4:	07 96       	adiw	r24, 0x07	; 7
    15d6:	95 95       	asr	r25
    15d8:	87 95       	ror	r24
    15da:	95 95       	asr	r25
    15dc:	87 95       	ror	r24
    15de:	95 95       	asr	r25
    15e0:	87 95       	ror	r24
    15e2:	e6 e8       	ldi	r30, 0x86	; 134
    15e4:	f1 e0       	ldi	r31, 0x01	; 1
    15e6:	8f 5f       	subi	r24, 0xFF	; 255
    15e8:	87 83       	std	Z+7, r24	; 0x07
    15ea:	20 87       	std	Z+8, r18	; 0x08
    15ec:	08 95       	ret

000015ee <GLCD_PrintChar>:
    15ee:	4f 92       	push	r4
    15f0:	5f 92       	push	r5
    15f2:	6f 92       	push	r6
    15f4:	7f 92       	push	r7
    15f6:	8f 92       	push	r8
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	a6 e8       	ldi	r26, 0x86	; 134
    1610:	b1 e0       	ldi	r27, 0x01	; 1
    1612:	5c 90       	ld	r5, X
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	4c 90       	ld	r4, X
    1618:	11 97       	sbiw	r26, 0x01	; 1
    161a:	80 52       	subi	r24, 0x20	; 32
    161c:	15 96       	adiw	r26, 0x05	; 5
    161e:	9c 91       	ld	r25, X
    1620:	15 97       	sbiw	r26, 0x05	; 5
    1622:	17 96       	adiw	r26, 0x07	; 7
    1624:	2c 91       	ld	r18, X
    1626:	17 97       	sbiw	r26, 0x07	; 7
    1628:	92 9f       	mul	r25, r18
    162a:	90 01       	movw	r18, r0
    162c:	11 24       	eor	r1, r1
    162e:	2f 5f       	subi	r18, 0xFF	; 255
    1630:	3f 4f       	sbci	r19, 0xFF	; 255
    1632:	82 9f       	mul	r24, r18
    1634:	a0 01       	movw	r20, r0
    1636:	83 9f       	mul	r24, r19
    1638:	50 0d       	add	r21, r0
    163a:	11 24       	eor	r1, r1
    163c:	13 96       	adiw	r26, 0x03	; 3
    163e:	ed 91       	ld	r30, X+
    1640:	fc 91       	ld	r31, X
    1642:	14 97       	sbiw	r26, 0x04	; 4
    1644:	5a 01       	movw	r10, r20
    1646:	8f ef       	ldi	r24, 0xFF	; 255
    1648:	a8 1a       	sub	r10, r24
    164a:	b8 0a       	sbc	r11, r24
    164c:	e4 0f       	add	r30, r20
    164e:	f5 1f       	adc	r31, r21
    1650:	74 90       	lpm	r7, Z
    1652:	84 2d       	mov	r24, r4
    1654:	87 70       	andi	r24, 0x07	; 7
    1656:	98 2e       	mov	r9, r24
    1658:	64 2c       	mov	r6, r4
    165a:	81 2c       	mov	r8, r1
    165c:	5f c0       	rjmp	.+190    	; 0x171c <GLCD_PrintChar+0x12e>
    165e:	66 2d       	mov	r22, r6
    1660:	85 2d       	mov	r24, r5
    1662:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    1666:	75 01       	movw	r14, r10
    1668:	e8 0c       	add	r14, r8
    166a:	f1 1c       	adc	r15, r1
    166c:	67 01       	movw	r12, r14
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	c8 1a       	sub	r12, r24
    1672:	d1 08       	sbc	r13, r1
    1674:	10 e0       	ldi	r17, 0x00	; 0
    1676:	41 c0       	rjmp	.+130    	; 0x16fa <GLCD_PrintChar+0x10c>
    1678:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <__GLCD+0x3>
    167c:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <__GLCD+0x4>
    1680:	fc 01       	movw	r30, r24
    1682:	ee 0d       	add	r30, r14
    1684:	ff 1d       	adc	r31, r15
    1686:	24 91       	lpm	r18, Z
    1688:	49 2d       	mov	r20, r9
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	09 2c       	mov	r0, r9
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <GLCD_PrintChar+0xa8>
    1692:	22 0f       	add	r18, r18
    1694:	33 1f       	adc	r19, r19
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <GLCD_PrintChar+0xa4>
    169a:	02 2f       	mov	r16, r18
    169c:	88 20       	and	r8, r8
    169e:	a1 f0       	breq	.+40     	; 0x16c8 <GLCD_PrintChar+0xda>
    16a0:	fc 01       	movw	r30, r24
    16a2:	ec 0d       	add	r30, r12
    16a4:	fd 1d       	adc	r31, r13
    16a6:	e4 91       	lpm	r30, Z
    16a8:	88 e0       	ldi	r24, 0x08	; 8
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	84 1b       	sub	r24, r20
    16ae:	95 0b       	sbc	r25, r21
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GLCD_PrintChar+0xca>
    16b4:	f5 95       	asr	r31
    16b6:	e7 95       	ror	r30
    16b8:	8a 95       	dec	r24
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GLCD_PrintChar+0xc6>
    16bc:	0e 2f       	mov	r16, r30
    16be:	02 2b       	or	r16, r18
    16c0:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <__GLCD+0x7>
    16c4:	c8 0e       	add	r12, r24
    16c6:	d1 1c       	adc	r13, r1
    16c8:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__GLCD+0x8>
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	39 f4       	brne	.+14     	; 0x16de <GLCD_PrintChar+0xf0>
    16d0:	e6 e8       	ldi	r30, 0x86	; 134
    16d2:	f1 e0       	ldi	r31, 0x01	; 1
    16d4:	61 81       	ldd	r22, Z+1	; 0x01
    16d6:	80 81       	ld	r24, Z
    16d8:	0e 94 19 07 	call	0xe32	; 0xe32 <GLCD_BufferRead>
    16dc:	08 2b       	or	r16, r24
    16de:	c6 e8       	ldi	r28, 0x86	; 134
    16e0:	d1 e0       	ldi	r29, 0x01	; 1
    16e2:	69 81       	ldd	r22, Y+1	; 0x01
    16e4:	88 81       	ld	r24, Y
    16e6:	91 e0       	ldi	r25, 0x01	; 1
    16e8:	98 0f       	add	r25, r24
    16ea:	98 83       	st	Y, r25
    16ec:	40 2f       	mov	r20, r16
    16ee:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    16f2:	8f 81       	ldd	r24, Y+7	; 0x07
    16f4:	e8 0e       	add	r14, r24
    16f6:	f1 1c       	adc	r15, r1
    16f8:	1f 5f       	subi	r17, 0xFF	; 255
    16fa:	17 15       	cp	r17, r7
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <GLCD_PrintChar+0x112>
    16fe:	bc cf       	rjmp	.-136    	; 0x1678 <GLCD_PrintChar+0x8a>
    1700:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__GLCD+0x8>
    1704:	81 11       	cpse	r24, r1
    1706:	07 c0       	rjmp	.+14     	; 0x1716 <GLCD_PrintChar+0x128>
    1708:	e6 e8       	ldi	r30, 0x86	; 134
    170a:	f1 e0       	ldi	r31, 0x01	; 1
    170c:	40 e0       	ldi	r20, 0x00	; 0
    170e:	61 81       	ldd	r22, Z+1	; 0x01
    1710:	80 81       	ld	r24, Z
    1712:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    1716:	88 e0       	ldi	r24, 0x08	; 8
    1718:	68 0e       	add	r6, r24
    171a:	83 94       	inc	r8
    171c:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <__GLCD+0x7>
    1720:	88 16       	cp	r8, r24
    1722:	08 f4       	brcc	.+2      	; 0x1726 <GLCD_PrintChar+0x138>
    1724:	9c cf       	rjmp	.-200    	; 0x165e <GLCD_PrintChar+0x70>
    1726:	24 2d       	mov	r18, r4
    1728:	26 95       	lsr	r18
    172a:	26 95       	lsr	r18
    172c:	26 95       	lsr	r18
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <__GLCD+0x6>
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	84 0d       	add	r24, r4
    1738:	91 1d       	adc	r25, r1
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	ac 01       	movw	r20, r24
    173e:	12 f4       	brpl	.+4      	; 0x1744 <GLCD_PrintChar+0x156>
    1740:	49 5f       	subi	r20, 0xF9	; 249
    1742:	5f 4f       	sbci	r21, 0xFF	; 255
    1744:	55 95       	asr	r21
    1746:	47 95       	ror	r20
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	55 95       	asr	r21
    174e:	47 95       	ror	r20
    1750:	24 17       	cp	r18, r20
    1752:	35 07       	cpc	r19, r21
    1754:	09 f4       	brne	.+2      	; 0x1758 <GLCD_PrintChar+0x16a>
    1756:	45 c0       	rjmp	.+138    	; 0x17e2 <GLCD_PrintChar+0x1f4>
    1758:	8f e3       	ldi	r24, 0x3F	; 63
    175a:	86 15       	cp	r24, r6
    175c:	08 f4       	brcc	.+2      	; 0x1760 <GLCD_PrintChar+0x172>
    175e:	41 c0       	rjmp	.+130    	; 0x17e2 <GLCD_PrintChar+0x1f4>
    1760:	66 2d       	mov	r22, r6
    1762:	85 2d       	mov	r24, r5
    1764:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    1768:	a8 0c       	add	r10, r8
    176a:	b1 1c       	adc	r11, r1
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	a8 1a       	sub	r10, r24
    1770:	b1 08       	sbc	r11, r1
    1772:	00 e0       	ldi	r16, 0x00	; 0
    1774:	29 c0       	rjmp	.+82     	; 0x17c8 <GLCD_PrintChar+0x1da>
    1776:	c6 e8       	ldi	r28, 0x86	; 134
    1778:	d1 e0       	ldi	r29, 0x01	; 1
    177a:	f9 80       	ldd	r15, Y+1	; 0x01
    177c:	18 81       	ld	r17, Y
    177e:	6f 2d       	mov	r22, r15
    1780:	81 2f       	mov	r24, r17
    1782:	0e 94 19 07 	call	0xe32	; 0xe32 <GLCD_BufferRead>
    1786:	eb 81       	ldd	r30, Y+3	; 0x03
    1788:	fc 81       	ldd	r31, Y+4	; 0x04
    178a:	ea 0d       	add	r30, r10
    178c:	fb 1d       	adc	r31, r11
    178e:	44 91       	lpm	r20, Z
    1790:	28 e0       	ldi	r18, 0x08	; 8
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	29 19       	sub	r18, r9
    1796:	31 09       	sbc	r19, r1
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <GLCD_PrintChar+0x1b2>
    179c:	55 95       	asr	r21
    179e:	47 95       	ror	r20
    17a0:	2a 95       	dec	r18
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <GLCD_PrintChar+0x1ae>
    17a4:	48 2b       	or	r20, r24
    17a6:	98 85       	ldd	r25, Y+8	; 0x08
    17a8:	91 30       	cpi	r25, 0x01	; 1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <GLCD_PrintChar+0x1c0>
    17ac:	48 2b       	or	r20, r24
    17ae:	c6 e8       	ldi	r28, 0x86	; 134
    17b0:	d1 e0       	ldi	r29, 0x01	; 1
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	81 0f       	add	r24, r17
    17b6:	88 83       	st	Y, r24
    17b8:	6f 2d       	mov	r22, r15
    17ba:	81 2f       	mov	r24, r17
    17bc:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    17c0:	8f 81       	ldd	r24, Y+7	; 0x07
    17c2:	a8 0e       	add	r10, r24
    17c4:	b1 1c       	adc	r11, r1
    17c6:	0f 5f       	subi	r16, 0xFF	; 255
    17c8:	07 15       	cp	r16, r7
    17ca:	a8 f2       	brcs	.-86     	; 0x1776 <GLCD_PrintChar+0x188>
    17cc:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__GLCD+0x8>
    17d0:	81 11       	cpse	r24, r1
    17d2:	07 c0       	rjmp	.+14     	; 0x17e2 <GLCD_PrintChar+0x1f4>
    17d4:	e6 e8       	ldi	r30, 0x86	; 134
    17d6:	f1 e0       	ldi	r31, 0x01	; 1
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	61 81       	ldd	r22, Z+1	; 0x01
    17dc:	80 81       	ld	r24, Z
    17de:	0e 94 0b 07 	call	0xe16	; 0xe16 <GLCD_BufferWrite>
    17e2:	85 2d       	mov	r24, r5
    17e4:	87 0d       	add	r24, r7
    17e6:	64 2d       	mov	r22, r4
    17e8:	8f 5f       	subi	r24, 0xFF	; 255
    17ea:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <GLCD_GotoXY>
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ff 90       	pop	r15
    17f8:	ef 90       	pop	r14
    17fa:	df 90       	pop	r13
    17fc:	cf 90       	pop	r12
    17fe:	bf 90       	pop	r11
    1800:	af 90       	pop	r10
    1802:	9f 90       	pop	r9
    1804:	8f 90       	pop	r8
    1806:	7f 90       	pop	r7
    1808:	6f 90       	pop	r6
    180a:	5f 90       	pop	r5
    180c:	4f 90       	pop	r4
    180e:	08 95       	ret

00001810 <GLCD_PrintString>:
    1810:	cf 93       	push	r28
    1812:	df 93       	push	r29
    1814:	ec 01       	movw	r28, r24
    1816:	0d c0       	rjmp	.+26     	; 0x1832 <GLCD_PrintString+0x22>
    1818:	e6 e8       	ldi	r30, 0x86	; 134
    181a:	f1 e0       	ldi	r31, 0x01	; 1
    181c:	90 81       	ld	r25, Z
    181e:	25 81       	ldd	r18, Z+5	; 0x05
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	29 0f       	add	r18, r25
    1824:	31 1d       	adc	r19, r1
    1826:	20 38       	cpi	r18, 0x80	; 128
    1828:	31 05       	cpc	r19, r1
    182a:	34 f4       	brge	.+12     	; 0x1838 <GLCD_PrintString+0x28>
    182c:	21 96       	adiw	r28, 0x01	; 1
    182e:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <GLCD_PrintChar>
    1832:	88 81       	ld	r24, Y
    1834:	81 11       	cpse	r24, r1
    1836:	f0 cf       	rjmp	.-32     	; 0x1818 <GLCD_PrintString+0x8>
    1838:	df 91       	pop	r29
    183a:	cf 91       	pop	r28
    183c:	08 95       	ret

0000183e <GLCD_PrintInteger>:

void GLCD_PrintInteger(const int32_t Value)
{
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	2c 97       	sbiw	r28, 0x0c	; 12
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    1856:	61 15       	cp	r22, r1
    1858:	71 05       	cpc	r23, r1
    185a:	81 05       	cpc	r24, r1
    185c:	91 05       	cpc	r25, r1
    185e:	21 f4       	brne	.+8      	; 0x1868 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    1860:	80 e3       	ldi	r24, 0x30	; 48
    1862:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <GLCD_PrintChar>
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <GLCD_PrintInteger+0x52>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    1868:	61 15       	cp	r22, r1
    186a:	71 05       	cpc	r23, r1
    186c:	81 05       	cpc	r24, r1
    186e:	20 e8       	ldi	r18, 0x80	; 128
    1870:	92 07       	cpc	r25, r18
    1872:	71 f0       	breq	.+28     	; 0x1890 <GLCD_PrintInteger+0x52>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    1874:	8e 01       	movw	r16, r28
    1876:	0f 5f       	subi	r16, 0xFF	; 255
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	2c e0       	ldi	r18, 0x0C	; 12
    187c:	f8 01       	movw	r30, r16
    187e:	11 92       	st	Z+, r1
    1880:	2a 95       	dec	r18
    1882:	e9 f7       	brne	.-6      	; 0x187e <GLCD_PrintInteger+0x40>
		
		//Convert integer to array
		Int2bcd(Value, bcd);
    1884:	a8 01       	movw	r20, r16
    1886:	0e 94 27 07 	call	0xe4e	; 0xe4e <Int2bcd>
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    188a:	c8 01       	movw	r24, r16
    188c:	0e 94 08 0c 	call	0x1810	; 0x1810 <GLCD_PrintString>
	}
}
    1890:	2c 96       	adiw	r28, 0x0c	; 12
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	de bf       	out	0x3e, r29	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	cd bf       	out	0x3d, r28	; 61
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	08 95       	ret

000018a6 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    18a6:	87 b1       	in	r24, 0x07	; 7
    18a8:	80 61       	ori	r24, 0x10	; 16
    18aa:	87 b9       	out	0x07, r24	; 7
	PinMode(TWI_SCL, Output);
    18ac:	87 b1       	in	r24, 0x07	; 7
    18ae:	80 62       	ori	r24, 0x20	; 32
    18b0:	87 b9       	out	0x07, r24	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    18b2:	88 b1       	in	r24, 0x08	; 8
    18b4:	80 61       	ori	r24, 0x10	; 16
    18b6:	88 b9       	out	0x08, r24	; 8
	DigitalWrite(TWI_SCL, High);
    18b8:	88 b1       	in	r24, 0x08	; 8
    18ba:	80 62       	ori	r24, 0x20	; 32
    18bc:	88 b9       	out	0x08, r24	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    18be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    18c2:	88 e4       	ldi	r24, 0x48	; 72
    18c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    18c8:	84 e0       	ldi	r24, 0x04	; 4
    18ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18ce:	08 95       	ret

000018d0 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    18d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    18d4:	88 7f       	andi	r24, 0xF8	; 248
    18d6:	08 95       	ret

000018d8 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    18d8:	84 ea       	ldi	r24, 0xA4	; 164
    18da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    18de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18e2:	88 23       	and	r24, r24
    18e4:	e4 f7       	brge	.-8      	; 0x18de <TWI_BeginTransmission+0x6>

	//Return status register
	return (TWI_Status());
    18e6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <TWI_Status>
}
    18ea:	08 95       	ret

000018ec <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    18ec:	85 ed       	ldi	r24, 0xD5	; 213
    18ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    18f2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18f6:	84 fd       	sbrc	r24, 4
    18f8:	fc cf       	rjmp	.-8      	; 0x18f2 <TWI_EndTransmission+0x6>
}
    18fa:	08 95       	ret

000018fc <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    18fc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    1900:	84 e8       	ldi	r24, 0x84	; 132
    1902:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    1906:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    190a:	88 23       	and	r24, r24
    190c:	e4 f7       	brge	.-8      	; 0x1906 <TWI_Transmit+0xa>

	//Return status register
	return (TWI_Status());
    190e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <TWI_Status>
}
    1912:	08 95       	ret

00001914 <__subsf3>:
    1914:	50 58       	subi	r21, 0x80	; 128

00001916 <__addsf3>:
    1916:	bb 27       	eor	r27, r27
    1918:	aa 27       	eor	r26, r26
    191a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__addsf3x>
    191e:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_round>
    1922:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_pscA>
    1926:	38 f0       	brcs	.+14     	; 0x1936 <__addsf3+0x20>
    1928:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscB>
    192c:	20 f0       	brcs	.+8      	; 0x1936 <__addsf3+0x20>
    192e:	39 f4       	brne	.+14     	; 0x193e <__addsf3+0x28>
    1930:	9f 3f       	cpi	r25, 0xFF	; 255
    1932:	19 f4       	brne	.+6      	; 0x193a <__addsf3+0x24>
    1934:	26 f4       	brtc	.+8      	; 0x193e <__addsf3+0x28>
    1936:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_nan>
    193a:	0e f4       	brtc	.+2      	; 0x193e <__addsf3+0x28>
    193c:	e0 95       	com	r30
    193e:	e7 fb       	bst	r30, 7
    1940:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_inf>

00001944 <__addsf3x>:
    1944:	e9 2f       	mov	r30, r25
    1946:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__fp_split3>
    194a:	58 f3       	brcs	.-42     	; 0x1922 <__addsf3+0xc>
    194c:	ba 17       	cp	r27, r26
    194e:	62 07       	cpc	r22, r18
    1950:	73 07       	cpc	r23, r19
    1952:	84 07       	cpc	r24, r20
    1954:	95 07       	cpc	r25, r21
    1956:	20 f0       	brcs	.+8      	; 0x1960 <__addsf3x+0x1c>
    1958:	79 f4       	brne	.+30     	; 0x1978 <__addsf3x+0x34>
    195a:	a6 f5       	brtc	.+104    	; 0x19c4 <__addsf3x+0x80>
    195c:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__fp_zero>
    1960:	0e f4       	brtc	.+2      	; 0x1964 <__addsf3x+0x20>
    1962:	e0 95       	com	r30
    1964:	0b 2e       	mov	r0, r27
    1966:	ba 2f       	mov	r27, r26
    1968:	a0 2d       	mov	r26, r0
    196a:	0b 01       	movw	r0, r22
    196c:	b9 01       	movw	r22, r18
    196e:	90 01       	movw	r18, r0
    1970:	0c 01       	movw	r0, r24
    1972:	ca 01       	movw	r24, r20
    1974:	a0 01       	movw	r20, r0
    1976:	11 24       	eor	r1, r1
    1978:	ff 27       	eor	r31, r31
    197a:	59 1b       	sub	r21, r25
    197c:	99 f0       	breq	.+38     	; 0x19a4 <__addsf3x+0x60>
    197e:	59 3f       	cpi	r21, 0xF9	; 249
    1980:	50 f4       	brcc	.+20     	; 0x1996 <__addsf3x+0x52>
    1982:	50 3e       	cpi	r21, 0xE0	; 224
    1984:	68 f1       	brcs	.+90     	; 0x19e0 <__addsf3x+0x9c>
    1986:	1a 16       	cp	r1, r26
    1988:	f0 40       	sbci	r31, 0x00	; 0
    198a:	a2 2f       	mov	r26, r18
    198c:	23 2f       	mov	r18, r19
    198e:	34 2f       	mov	r19, r20
    1990:	44 27       	eor	r20, r20
    1992:	58 5f       	subi	r21, 0xF8	; 248
    1994:	f3 cf       	rjmp	.-26     	; 0x197c <__addsf3x+0x38>
    1996:	46 95       	lsr	r20
    1998:	37 95       	ror	r19
    199a:	27 95       	ror	r18
    199c:	a7 95       	ror	r26
    199e:	f0 40       	sbci	r31, 0x00	; 0
    19a0:	53 95       	inc	r21
    19a2:	c9 f7       	brne	.-14     	; 0x1996 <__addsf3x+0x52>
    19a4:	7e f4       	brtc	.+30     	; 0x19c4 <__addsf3x+0x80>
    19a6:	1f 16       	cp	r1, r31
    19a8:	ba 0b       	sbc	r27, r26
    19aa:	62 0b       	sbc	r22, r18
    19ac:	73 0b       	sbc	r23, r19
    19ae:	84 0b       	sbc	r24, r20
    19b0:	ba f0       	brmi	.+46     	; 0x19e0 <__addsf3x+0x9c>
    19b2:	91 50       	subi	r25, 0x01	; 1
    19b4:	a1 f0       	breq	.+40     	; 0x19de <__addsf3x+0x9a>
    19b6:	ff 0f       	add	r31, r31
    19b8:	bb 1f       	adc	r27, r27
    19ba:	66 1f       	adc	r22, r22
    19bc:	77 1f       	adc	r23, r23
    19be:	88 1f       	adc	r24, r24
    19c0:	c2 f7       	brpl	.-16     	; 0x19b2 <__addsf3x+0x6e>
    19c2:	0e c0       	rjmp	.+28     	; 0x19e0 <__addsf3x+0x9c>
    19c4:	ba 0f       	add	r27, r26
    19c6:	62 1f       	adc	r22, r18
    19c8:	73 1f       	adc	r23, r19
    19ca:	84 1f       	adc	r24, r20
    19cc:	48 f4       	brcc	.+18     	; 0x19e0 <__addsf3x+0x9c>
    19ce:	87 95       	ror	r24
    19d0:	77 95       	ror	r23
    19d2:	67 95       	ror	r22
    19d4:	b7 95       	ror	r27
    19d6:	f7 95       	ror	r31
    19d8:	9e 3f       	cpi	r25, 0xFE	; 254
    19da:	08 f0       	brcs	.+2      	; 0x19de <__addsf3x+0x9a>
    19dc:	b0 cf       	rjmp	.-160    	; 0x193e <__addsf3+0x28>
    19de:	93 95       	inc	r25
    19e0:	88 0f       	add	r24, r24
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <__addsf3x+0xa2>
    19e4:	99 27       	eor	r25, r25
    19e6:	ee 0f       	add	r30, r30
    19e8:	97 95       	ror	r25
    19ea:	87 95       	ror	r24
    19ec:	08 95       	ret

000019ee <__cmpsf2>:
    19ee:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fp_cmp>
    19f2:	08 f4       	brcc	.+2      	; 0x19f6 <__cmpsf2+0x8>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	08 95       	ret

000019f8 <__divsf3>:
    19f8:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <__divsf3x>
    19fc:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_round>
    1a00:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscB>
    1a04:	58 f0       	brcs	.+22     	; 0x1a1c <__divsf3+0x24>
    1a06:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_pscA>
    1a0a:	40 f0       	brcs	.+16     	; 0x1a1c <__divsf3+0x24>
    1a0c:	29 f4       	brne	.+10     	; 0x1a18 <__divsf3+0x20>
    1a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a10:	29 f0       	breq	.+10     	; 0x1a1c <__divsf3+0x24>
    1a12:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_inf>
    1a16:	51 11       	cpse	r21, r1
    1a18:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1a1c:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_nan>

00001a20 <__divsf3x>:
    1a20:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__fp_split3>
    1a24:	68 f3       	brcs	.-38     	; 0x1a00 <__divsf3+0x8>

00001a26 <__divsf3_pse>:
    1a26:	99 23       	and	r25, r25
    1a28:	b1 f3       	breq	.-20     	; 0x1a16 <__divsf3+0x1e>
    1a2a:	55 23       	and	r21, r21
    1a2c:	91 f3       	breq	.-28     	; 0x1a12 <__divsf3+0x1a>
    1a2e:	95 1b       	sub	r25, r21
    1a30:	55 0b       	sbc	r21, r21
    1a32:	bb 27       	eor	r27, r27
    1a34:	aa 27       	eor	r26, r26
    1a36:	62 17       	cp	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	84 07       	cpc	r24, r20
    1a3c:	38 f0       	brcs	.+14     	; 0x1a4c <__divsf3_pse+0x26>
    1a3e:	9f 5f       	subi	r25, 0xFF	; 255
    1a40:	5f 4f       	sbci	r21, 0xFF	; 255
    1a42:	22 0f       	add	r18, r18
    1a44:	33 1f       	adc	r19, r19
    1a46:	44 1f       	adc	r20, r20
    1a48:	aa 1f       	adc	r26, r26
    1a4a:	a9 f3       	breq	.-22     	; 0x1a36 <__divsf3_pse+0x10>
    1a4c:	35 d0       	rcall	.+106    	; 0x1ab8 <__divsf3_pse+0x92>
    1a4e:	0e 2e       	mov	r0, r30
    1a50:	3a f0       	brmi	.+14     	; 0x1a60 <__divsf3_pse+0x3a>
    1a52:	e0 e8       	ldi	r30, 0x80	; 128
    1a54:	32 d0       	rcall	.+100    	; 0x1aba <__divsf3_pse+0x94>
    1a56:	91 50       	subi	r25, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	e6 95       	lsr	r30
    1a5c:	00 1c       	adc	r0, r0
    1a5e:	ca f7       	brpl	.-14     	; 0x1a52 <__divsf3_pse+0x2c>
    1a60:	2b d0       	rcall	.+86     	; 0x1ab8 <__divsf3_pse+0x92>
    1a62:	fe 2f       	mov	r31, r30
    1a64:	29 d0       	rcall	.+82     	; 0x1ab8 <__divsf3_pse+0x92>
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	bb 1f       	adc	r27, r27
    1a6e:	26 17       	cp	r18, r22
    1a70:	37 07       	cpc	r19, r23
    1a72:	48 07       	cpc	r20, r24
    1a74:	ab 07       	cpc	r26, r27
    1a76:	b0 e8       	ldi	r27, 0x80	; 128
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <__divsf3_pse+0x56>
    1a7a:	bb 0b       	sbc	r27, r27
    1a7c:	80 2d       	mov	r24, r0
    1a7e:	bf 01       	movw	r22, r30
    1a80:	ff 27       	eor	r31, r31
    1a82:	93 58       	subi	r25, 0x83	; 131
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	3a f0       	brmi	.+14     	; 0x1a96 <__divsf3_pse+0x70>
    1a88:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	78 f0       	brcs	.+30     	; 0x1aac <__divsf3_pse+0x86>
    1a8e:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_inf>
    1a92:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1a96:	5f 3f       	cpi	r21, 0xFF	; 255
    1a98:	e4 f3       	brlt	.-8      	; 0x1a92 <__divsf3_pse+0x6c>
    1a9a:	98 3e       	cpi	r25, 0xE8	; 232
    1a9c:	d4 f3       	brlt	.-12     	; 0x1a92 <__divsf3_pse+0x6c>
    1a9e:	86 95       	lsr	r24
    1aa0:	77 95       	ror	r23
    1aa2:	67 95       	ror	r22
    1aa4:	b7 95       	ror	r27
    1aa6:	f7 95       	ror	r31
    1aa8:	9f 5f       	subi	r25, 0xFF	; 255
    1aaa:	c9 f7       	brne	.-14     	; 0x1a9e <__divsf3_pse+0x78>
    1aac:	88 0f       	add	r24, r24
    1aae:	91 1d       	adc	r25, r1
    1ab0:	96 95       	lsr	r25
    1ab2:	87 95       	ror	r24
    1ab4:	97 f9       	bld	r25, 7
    1ab6:	08 95       	ret
    1ab8:	e1 e0       	ldi	r30, 0x01	; 1
    1aba:	66 0f       	add	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	88 1f       	adc	r24, r24
    1ac0:	bb 1f       	adc	r27, r27
    1ac2:	62 17       	cp	r22, r18
    1ac4:	73 07       	cpc	r23, r19
    1ac6:	84 07       	cpc	r24, r20
    1ac8:	ba 07       	cpc	r27, r26
    1aca:	20 f0       	brcs	.+8      	; 0x1ad4 <__divsf3_pse+0xae>
    1acc:	62 1b       	sub	r22, r18
    1ace:	73 0b       	sbc	r23, r19
    1ad0:	84 0b       	sbc	r24, r20
    1ad2:	ba 0b       	sbc	r27, r26
    1ad4:	ee 1f       	adc	r30, r30
    1ad6:	88 f7       	brcc	.-30     	; 0x1aba <__divsf3_pse+0x94>
    1ad8:	e0 95       	com	r30
    1ada:	08 95       	ret

00001adc <__fixsfdi>:
    1adc:	be e3       	ldi	r27, 0x3E	; 62
    1ade:	04 d0       	rcall	.+8      	; 0x1ae8 <__fixunssfdi+0x2>
    1ae0:	08 f4       	brcc	.+2      	; 0x1ae4 <__fixsfdi+0x8>
    1ae2:	90 e8       	ldi	r25, 0x80	; 128
    1ae4:	08 95       	ret

00001ae6 <__fixunssfdi>:
    1ae6:	bf e3       	ldi	r27, 0x3F	; 63
    1ae8:	22 27       	eor	r18, r18
    1aea:	33 27       	eor	r19, r19
    1aec:	a9 01       	movw	r20, r18
    1aee:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_splitA>
    1af2:	60 f1       	brcs	.+88     	; 0x1b4c <__fixunssfdi+0x66>
    1af4:	9f 57       	subi	r25, 0x7F	; 127
    1af6:	48 f1       	brcs	.+82     	; 0x1b4a <__fixunssfdi+0x64>
    1af8:	b9 17       	cp	r27, r25
    1afa:	40 f1       	brcs	.+80     	; 0x1b4c <__fixunssfdi+0x66>
    1afc:	bf e3       	ldi	r27, 0x3F	; 63
    1afe:	b9 1b       	sub	r27, r25
    1b00:	99 27       	eor	r25, r25
    1b02:	b8 50       	subi	r27, 0x08	; 8
    1b04:	3a f4       	brpl	.+14     	; 0x1b14 <__fixunssfdi+0x2e>
    1b06:	66 0f       	add	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	b3 95       	inc	r27
    1b10:	d2 f3       	brmi	.-12     	; 0x1b06 <__fixunssfdi+0x20>
    1b12:	16 c0       	rjmp	.+44     	; 0x1b40 <__fixunssfdi+0x5a>
    1b14:	b8 50       	subi	r27, 0x08	; 8
    1b16:	4a f0       	brmi	.+18     	; 0x1b2a <__fixunssfdi+0x44>
    1b18:	23 2f       	mov	r18, r19
    1b1a:	34 2f       	mov	r19, r20
    1b1c:	45 2f       	mov	r20, r21
    1b1e:	56 2f       	mov	r21, r22
    1b20:	67 2f       	mov	r22, r23
    1b22:	78 2f       	mov	r23, r24
    1b24:	88 27       	eor	r24, r24
    1b26:	b8 50       	subi	r27, 0x08	; 8
    1b28:	ba f7       	brpl	.-18     	; 0x1b18 <__fixunssfdi+0x32>
    1b2a:	b8 5f       	subi	r27, 0xF8	; 248
    1b2c:	49 f0       	breq	.+18     	; 0x1b40 <__fixunssfdi+0x5a>
    1b2e:	86 95       	lsr	r24
    1b30:	77 95       	ror	r23
    1b32:	67 95       	ror	r22
    1b34:	57 95       	ror	r21
    1b36:	47 95       	ror	r20
    1b38:	37 95       	ror	r19
    1b3a:	27 95       	ror	r18
    1b3c:	ba 95       	dec	r27
    1b3e:	b9 f7       	brne	.-18     	; 0x1b2e <__fixunssfdi+0x48>
    1b40:	16 f4       	brtc	.+4      	; 0x1b46 <__fixunssfdi+0x60>
    1b42:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fp_negdi>
    1b46:	88 94       	clc
    1b48:	08 95       	ret
    1b4a:	88 94       	clc
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	cb 01       	movw	r24, r22
    1b52:	08 95       	ret

00001b54 <__fixsfsi>:
    1b54:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fixunssfsi>
    1b58:	68 94       	set
    1b5a:	b1 11       	cpse	r27, r1
    1b5c:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1b60:	08 95       	ret

00001b62 <__fixunssfsi>:
    1b62:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <__fp_splitA>
    1b66:	88 f0       	brcs	.+34     	; 0x1b8a <__fixunssfsi+0x28>
    1b68:	9f 57       	subi	r25, 0x7F	; 127
    1b6a:	98 f0       	brcs	.+38     	; 0x1b92 <__fixunssfsi+0x30>
    1b6c:	b9 2f       	mov	r27, r25
    1b6e:	99 27       	eor	r25, r25
    1b70:	b7 51       	subi	r27, 0x17	; 23
    1b72:	b0 f0       	brcs	.+44     	; 0x1ba0 <__fixunssfsi+0x3e>
    1b74:	e1 f0       	breq	.+56     	; 0x1bae <__fixunssfsi+0x4c>
    1b76:	66 0f       	add	r22, r22
    1b78:	77 1f       	adc	r23, r23
    1b7a:	88 1f       	adc	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	1a f0       	brmi	.+6      	; 0x1b86 <__fixunssfsi+0x24>
    1b80:	ba 95       	dec	r27
    1b82:	c9 f7       	brne	.-14     	; 0x1b76 <__fixunssfsi+0x14>
    1b84:	14 c0       	rjmp	.+40     	; 0x1bae <__fixunssfsi+0x4c>
    1b86:	b1 30       	cpi	r27, 0x01	; 1
    1b88:	91 f0       	breq	.+36     	; 0x1bae <__fixunssfsi+0x4c>
    1b8a:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__fp_zero>
    1b8e:	b1 e0       	ldi	r27, 0x01	; 1
    1b90:	08 95       	ret
    1b92:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__fp_zero>
    1b96:	67 2f       	mov	r22, r23
    1b98:	78 2f       	mov	r23, r24
    1b9a:	88 27       	eor	r24, r24
    1b9c:	b8 5f       	subi	r27, 0xF8	; 248
    1b9e:	39 f0       	breq	.+14     	; 0x1bae <__fixunssfsi+0x4c>
    1ba0:	b9 3f       	cpi	r27, 0xF9	; 249
    1ba2:	cc f3       	brlt	.-14     	; 0x1b96 <__fixunssfsi+0x34>
    1ba4:	86 95       	lsr	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	b3 95       	inc	r27
    1bac:	d9 f7       	brne	.-10     	; 0x1ba4 <__fixunssfsi+0x42>
    1bae:	3e f4       	brtc	.+14     	; 0x1bbe <__fixunssfsi+0x5c>
    1bb0:	90 95       	com	r25
    1bb2:	80 95       	com	r24
    1bb4:	70 95       	com	r23
    1bb6:	61 95       	neg	r22
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	08 95       	ret

00001bc0 <__floatunsisf>:
    1bc0:	e8 94       	clt
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <__floatsisf+0x12>

00001bc4 <__floatsisf>:
    1bc4:	97 fb       	bst	r25, 7
    1bc6:	3e f4       	brtc	.+14     	; 0x1bd6 <__floatsisf+0x12>
    1bc8:	90 95       	com	r25
    1bca:	80 95       	com	r24
    1bcc:	70 95       	com	r23
    1bce:	61 95       	neg	r22
    1bd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1bd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd6:	99 23       	and	r25, r25
    1bd8:	a9 f0       	breq	.+42     	; 0x1c04 <__floatsisf+0x40>
    1bda:	f9 2f       	mov	r31, r25
    1bdc:	96 e9       	ldi	r25, 0x96	; 150
    1bde:	bb 27       	eor	r27, r27
    1be0:	93 95       	inc	r25
    1be2:	f6 95       	lsr	r31
    1be4:	87 95       	ror	r24
    1be6:	77 95       	ror	r23
    1be8:	67 95       	ror	r22
    1bea:	b7 95       	ror	r27
    1bec:	f1 11       	cpse	r31, r1
    1bee:	f8 cf       	rjmp	.-16     	; 0x1be0 <__floatsisf+0x1c>
    1bf0:	fa f4       	brpl	.+62     	; 0x1c30 <__floatsisf+0x6c>
    1bf2:	bb 0f       	add	r27, r27
    1bf4:	11 f4       	brne	.+4      	; 0x1bfa <__floatsisf+0x36>
    1bf6:	60 ff       	sbrs	r22, 0
    1bf8:	1b c0       	rjmp	.+54     	; 0x1c30 <__floatsisf+0x6c>
    1bfa:	6f 5f       	subi	r22, 0xFF	; 255
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1c00:	9f 4f       	sbci	r25, 0xFF	; 255
    1c02:	16 c0       	rjmp	.+44     	; 0x1c30 <__floatsisf+0x6c>
    1c04:	88 23       	and	r24, r24
    1c06:	11 f0       	breq	.+4      	; 0x1c0c <__floatsisf+0x48>
    1c08:	96 e9       	ldi	r25, 0x96	; 150
    1c0a:	11 c0       	rjmp	.+34     	; 0x1c2e <__floatsisf+0x6a>
    1c0c:	77 23       	and	r23, r23
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <__floatsisf+0x54>
    1c10:	9e e8       	ldi	r25, 0x8E	; 142
    1c12:	87 2f       	mov	r24, r23
    1c14:	76 2f       	mov	r23, r22
    1c16:	05 c0       	rjmp	.+10     	; 0x1c22 <__floatsisf+0x5e>
    1c18:	66 23       	and	r22, r22
    1c1a:	71 f0       	breq	.+28     	; 0x1c38 <__floatsisf+0x74>
    1c1c:	96 e8       	ldi	r25, 0x86	; 134
    1c1e:	86 2f       	mov	r24, r22
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	2a f0       	brmi	.+10     	; 0x1c30 <__floatsisf+0x6c>
    1c26:	9a 95       	dec	r25
    1c28:	66 0f       	add	r22, r22
    1c2a:	77 1f       	adc	r23, r23
    1c2c:	88 1f       	adc	r24, r24
    1c2e:	da f7       	brpl	.-10     	; 0x1c26 <__floatsisf+0x62>
    1c30:	88 0f       	add	r24, r24
    1c32:	96 95       	lsr	r25
    1c34:	87 95       	ror	r24
    1c36:	97 f9       	bld	r25, 7
    1c38:	08 95       	ret

00001c3a <__floatundisf>:
    1c3a:	e8 94       	clt

00001c3c <__fp_di2sf>:
    1c3c:	f9 2f       	mov	r31, r25
    1c3e:	96 eb       	ldi	r25, 0xB6	; 182
    1c40:	ff 23       	and	r31, r31
    1c42:	81 f0       	breq	.+32     	; 0x1c64 <__fp_di2sf+0x28>
    1c44:	12 16       	cp	r1, r18
    1c46:	13 06       	cpc	r1, r19
    1c48:	14 06       	cpc	r1, r20
    1c4a:	44 0b       	sbc	r20, r20
    1c4c:	93 95       	inc	r25
    1c4e:	f6 95       	lsr	r31
    1c50:	87 95       	ror	r24
    1c52:	77 95       	ror	r23
    1c54:	67 95       	ror	r22
    1c56:	57 95       	ror	r21
    1c58:	40 40       	sbci	r20, 0x00	; 0
    1c5a:	ff 23       	and	r31, r31
    1c5c:	b9 f7       	brne	.-18     	; 0x1c4c <__fp_di2sf+0x10>
    1c5e:	1b c0       	rjmp	.+54     	; 0x1c96 <__fp_di2sf+0x5a>
    1c60:	99 27       	eor	r25, r25
    1c62:	08 95       	ret
    1c64:	88 23       	and	r24, r24
    1c66:	51 f4       	brne	.+20     	; 0x1c7c <__fp_di2sf+0x40>
    1c68:	98 50       	subi	r25, 0x08	; 8
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <__fp_di2sf+0x24>
    1c6c:	87 2b       	or	r24, r23
    1c6e:	76 2f       	mov	r23, r22
    1c70:	65 2f       	mov	r22, r21
    1c72:	54 2f       	mov	r21, r20
    1c74:	43 2f       	mov	r20, r19
    1c76:	32 2f       	mov	r19, r18
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	b1 f3       	breq	.-20     	; 0x1c68 <__fp_di2sf+0x2c>
    1c7c:	12 16       	cp	r1, r18
    1c7e:	13 06       	cpc	r1, r19
    1c80:	14 06       	cpc	r1, r20
    1c82:	44 0b       	sbc	r20, r20
    1c84:	88 23       	and	r24, r24
    1c86:	3a f0       	brmi	.+14     	; 0x1c96 <__fp_di2sf+0x5a>
    1c88:	9a 95       	dec	r25
    1c8a:	44 0f       	add	r20, r20
    1c8c:	55 1f       	adc	r21, r21
    1c8e:	66 1f       	adc	r22, r22
    1c90:	77 1f       	adc	r23, r23
    1c92:	88 1f       	adc	r24, r24
    1c94:	ca f7       	brpl	.-14     	; 0x1c88 <__fp_di2sf+0x4c>
    1c96:	55 23       	and	r21, r21
    1c98:	4a f4       	brpl	.+18     	; 0x1cac <__fp_di2sf+0x70>
    1c9a:	44 0f       	add	r20, r20
    1c9c:	55 1f       	adc	r21, r21
    1c9e:	11 f4       	brne	.+4      	; 0x1ca4 <__fp_di2sf+0x68>
    1ca0:	60 ff       	sbrs	r22, 0
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <__fp_di2sf+0x70>
    1ca4:	6f 5f       	subi	r22, 0xFF	; 255
    1ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    1caa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cac:	88 0f       	add	r24, r24
    1cae:	96 95       	lsr	r25
    1cb0:	87 95       	ror	r24
    1cb2:	97 f9       	bld	r25, 7
    1cb4:	08 95       	ret

00001cb6 <__fp_cmp>:
    1cb6:	99 0f       	add	r25, r25
    1cb8:	00 08       	sbc	r0, r0
    1cba:	55 0f       	add	r21, r21
    1cbc:	aa 0b       	sbc	r26, r26
    1cbe:	e0 e8       	ldi	r30, 0x80	; 128
    1cc0:	fe ef       	ldi	r31, 0xFE	; 254
    1cc2:	16 16       	cp	r1, r22
    1cc4:	17 06       	cpc	r1, r23
    1cc6:	e8 07       	cpc	r30, r24
    1cc8:	f9 07       	cpc	r31, r25
    1cca:	c0 f0       	brcs	.+48     	; 0x1cfc <__fp_cmp+0x46>
    1ccc:	12 16       	cp	r1, r18
    1cce:	13 06       	cpc	r1, r19
    1cd0:	e4 07       	cpc	r30, r20
    1cd2:	f5 07       	cpc	r31, r21
    1cd4:	98 f0       	brcs	.+38     	; 0x1cfc <__fp_cmp+0x46>
    1cd6:	62 1b       	sub	r22, r18
    1cd8:	73 0b       	sbc	r23, r19
    1cda:	84 0b       	sbc	r24, r20
    1cdc:	95 0b       	sbc	r25, r21
    1cde:	39 f4       	brne	.+14     	; 0x1cee <__fp_cmp+0x38>
    1ce0:	0a 26       	eor	r0, r26
    1ce2:	61 f0       	breq	.+24     	; 0x1cfc <__fp_cmp+0x46>
    1ce4:	23 2b       	or	r18, r19
    1ce6:	24 2b       	or	r18, r20
    1ce8:	25 2b       	or	r18, r21
    1cea:	21 f4       	brne	.+8      	; 0x1cf4 <__fp_cmp+0x3e>
    1cec:	08 95       	ret
    1cee:	0a 26       	eor	r0, r26
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <__fp_cmp+0x3e>
    1cf2:	a1 40       	sbci	r26, 0x01	; 1
    1cf4:	a6 95       	lsr	r26
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	81 1d       	adc	r24, r1
    1cfa:	81 1d       	adc	r24, r1
    1cfc:	08 95       	ret

00001cfe <__fp_inf>:
    1cfe:	97 f9       	bld	r25, 7
    1d00:	9f 67       	ori	r25, 0x7F	; 127
    1d02:	80 e8       	ldi	r24, 0x80	; 128
    1d04:	70 e0       	ldi	r23, 0x00	; 0
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	08 95       	ret

00001d0a <__fp_nan>:
    1d0a:	9f ef       	ldi	r25, 0xFF	; 255
    1d0c:	80 ec       	ldi	r24, 0xC0	; 192
    1d0e:	08 95       	ret

00001d10 <__fp_negdi>:
    1d10:	90 95       	com	r25
    1d12:	80 95       	com	r24
    1d14:	70 95       	com	r23
    1d16:	60 95       	com	r22
    1d18:	50 95       	com	r21
    1d1a:	40 95       	com	r20
    1d1c:	30 95       	com	r19
    1d1e:	21 95       	neg	r18
    1d20:	3f 4f       	sbci	r19, 0xFF	; 255
    1d22:	4f 4f       	sbci	r20, 0xFF	; 255
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	6f 4f       	sbci	r22, 0xFF	; 255
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	08 95       	ret

00001d30 <__fp_pscA>:
    1d30:	00 24       	eor	r0, r0
    1d32:	0a 94       	dec	r0
    1d34:	16 16       	cp	r1, r22
    1d36:	17 06       	cpc	r1, r23
    1d38:	18 06       	cpc	r1, r24
    1d3a:	09 06       	cpc	r0, r25
    1d3c:	08 95       	ret

00001d3e <__fp_pscB>:
    1d3e:	00 24       	eor	r0, r0
    1d40:	0a 94       	dec	r0
    1d42:	12 16       	cp	r1, r18
    1d44:	13 06       	cpc	r1, r19
    1d46:	14 06       	cpc	r1, r20
    1d48:	05 06       	cpc	r0, r21
    1d4a:	08 95       	ret

00001d4c <__fp_round>:
    1d4c:	09 2e       	mov	r0, r25
    1d4e:	03 94       	inc	r0
    1d50:	00 0c       	add	r0, r0
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <__fp_round+0xc>
    1d54:	88 23       	and	r24, r24
    1d56:	52 f0       	brmi	.+20     	; 0x1d6c <__fp_round+0x20>
    1d58:	bb 0f       	add	r27, r27
    1d5a:	40 f4       	brcc	.+16     	; 0x1d6c <__fp_round+0x20>
    1d5c:	bf 2b       	or	r27, r31
    1d5e:	11 f4       	brne	.+4      	; 0x1d64 <__fp_round+0x18>
    1d60:	60 ff       	sbrs	r22, 0
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <__fp_round+0x20>
    1d64:	6f 5f       	subi	r22, 0xFF	; 255
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	08 95       	ret

00001d6e <__fp_split3>:
    1d6e:	57 fd       	sbrc	r21, 7
    1d70:	90 58       	subi	r25, 0x80	; 128
    1d72:	44 0f       	add	r20, r20
    1d74:	55 1f       	adc	r21, r21
    1d76:	59 f0       	breq	.+22     	; 0x1d8e <__fp_splitA+0x10>
    1d78:	5f 3f       	cpi	r21, 0xFF	; 255
    1d7a:	71 f0       	breq	.+28     	; 0x1d98 <__fp_splitA+0x1a>
    1d7c:	47 95       	ror	r20

00001d7e <__fp_splitA>:
    1d7e:	88 0f       	add	r24, r24
    1d80:	97 fb       	bst	r25, 7
    1d82:	99 1f       	adc	r25, r25
    1d84:	61 f0       	breq	.+24     	; 0x1d9e <__fp_splitA+0x20>
    1d86:	9f 3f       	cpi	r25, 0xFF	; 255
    1d88:	79 f0       	breq	.+30     	; 0x1da8 <__fp_splitA+0x2a>
    1d8a:	87 95       	ror	r24
    1d8c:	08 95       	ret
    1d8e:	12 16       	cp	r1, r18
    1d90:	13 06       	cpc	r1, r19
    1d92:	14 06       	cpc	r1, r20
    1d94:	55 1f       	adc	r21, r21
    1d96:	f2 cf       	rjmp	.-28     	; 0x1d7c <__fp_split3+0xe>
    1d98:	46 95       	lsr	r20
    1d9a:	f1 df       	rcall	.-30     	; 0x1d7e <__fp_splitA>
    1d9c:	08 c0       	rjmp	.+16     	; 0x1dae <__fp_splitA+0x30>
    1d9e:	16 16       	cp	r1, r22
    1da0:	17 06       	cpc	r1, r23
    1da2:	18 06       	cpc	r1, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	f1 cf       	rjmp	.-30     	; 0x1d8a <__fp_splitA+0xc>
    1da8:	86 95       	lsr	r24
    1daa:	71 05       	cpc	r23, r1
    1dac:	61 05       	cpc	r22, r1
    1dae:	08 94       	sec
    1db0:	08 95       	ret

00001db2 <__fp_zero>:
    1db2:	e8 94       	clt

00001db4 <__fp_szero>:
    1db4:	bb 27       	eor	r27, r27
    1db6:	66 27       	eor	r22, r22
    1db8:	77 27       	eor	r23, r23
    1dba:	cb 01       	movw	r24, r22
    1dbc:	97 f9       	bld	r25, 7
    1dbe:	08 95       	ret

00001dc0 <__gesf2>:
    1dc0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <__fp_cmp>
    1dc4:	08 f4       	brcc	.+2      	; 0x1dc8 <__gesf2+0x8>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	08 95       	ret

00001dca <__mulsf3>:
    1dca:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <__mulsf3x>
    1dce:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <__fp_round>
    1dd2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_pscA>
    1dd6:	38 f0       	brcs	.+14     	; 0x1de6 <__mulsf3+0x1c>
    1dd8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <__fp_pscB>
    1ddc:	20 f0       	brcs	.+8      	; 0x1de6 <__mulsf3+0x1c>
    1dde:	95 23       	and	r25, r21
    1de0:	11 f0       	breq	.+4      	; 0x1de6 <__mulsf3+0x1c>
    1de2:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_inf>
    1de6:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_nan>
    1dea:	11 24       	eor	r1, r1
    1dec:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>

00001df0 <__mulsf3x>:
    1df0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__fp_split3>
    1df4:	70 f3       	brcs	.-36     	; 0x1dd2 <__mulsf3+0x8>

00001df6 <__mulsf3_pse>:
    1df6:	95 9f       	mul	r25, r21
    1df8:	c1 f3       	breq	.-16     	; 0x1dea <__mulsf3+0x20>
    1dfa:	95 0f       	add	r25, r21
    1dfc:	50 e0       	ldi	r21, 0x00	; 0
    1dfe:	55 1f       	adc	r21, r21
    1e00:	62 9f       	mul	r22, r18
    1e02:	f0 01       	movw	r30, r0
    1e04:	72 9f       	mul	r23, r18
    1e06:	bb 27       	eor	r27, r27
    1e08:	f0 0d       	add	r31, r0
    1e0a:	b1 1d       	adc	r27, r1
    1e0c:	63 9f       	mul	r22, r19
    1e0e:	aa 27       	eor	r26, r26
    1e10:	f0 0d       	add	r31, r0
    1e12:	b1 1d       	adc	r27, r1
    1e14:	aa 1f       	adc	r26, r26
    1e16:	64 9f       	mul	r22, r20
    1e18:	66 27       	eor	r22, r22
    1e1a:	b0 0d       	add	r27, r0
    1e1c:	a1 1d       	adc	r26, r1
    1e1e:	66 1f       	adc	r22, r22
    1e20:	82 9f       	mul	r24, r18
    1e22:	22 27       	eor	r18, r18
    1e24:	b0 0d       	add	r27, r0
    1e26:	a1 1d       	adc	r26, r1
    1e28:	62 1f       	adc	r22, r18
    1e2a:	73 9f       	mul	r23, r19
    1e2c:	b0 0d       	add	r27, r0
    1e2e:	a1 1d       	adc	r26, r1
    1e30:	62 1f       	adc	r22, r18
    1e32:	83 9f       	mul	r24, r19
    1e34:	a0 0d       	add	r26, r0
    1e36:	61 1d       	adc	r22, r1
    1e38:	22 1f       	adc	r18, r18
    1e3a:	74 9f       	mul	r23, r20
    1e3c:	33 27       	eor	r19, r19
    1e3e:	a0 0d       	add	r26, r0
    1e40:	61 1d       	adc	r22, r1
    1e42:	23 1f       	adc	r18, r19
    1e44:	84 9f       	mul	r24, r20
    1e46:	60 0d       	add	r22, r0
    1e48:	21 1d       	adc	r18, r1
    1e4a:	82 2f       	mov	r24, r18
    1e4c:	76 2f       	mov	r23, r22
    1e4e:	6a 2f       	mov	r22, r26
    1e50:	11 24       	eor	r1, r1
    1e52:	9f 57       	subi	r25, 0x7F	; 127
    1e54:	50 40       	sbci	r21, 0x00	; 0
    1e56:	9a f0       	brmi	.+38     	; 0x1e7e <__mulsf3_pse+0x88>
    1e58:	f1 f0       	breq	.+60     	; 0x1e96 <__mulsf3_pse+0xa0>
    1e5a:	88 23       	and	r24, r24
    1e5c:	4a f0       	brmi	.+18     	; 0x1e70 <__mulsf3_pse+0x7a>
    1e5e:	ee 0f       	add	r30, r30
    1e60:	ff 1f       	adc	r31, r31
    1e62:	bb 1f       	adc	r27, r27
    1e64:	66 1f       	adc	r22, r22
    1e66:	77 1f       	adc	r23, r23
    1e68:	88 1f       	adc	r24, r24
    1e6a:	91 50       	subi	r25, 0x01	; 1
    1e6c:	50 40       	sbci	r21, 0x00	; 0
    1e6e:	a9 f7       	brne	.-22     	; 0x1e5a <__mulsf3_pse+0x64>
    1e70:	9e 3f       	cpi	r25, 0xFE	; 254
    1e72:	51 05       	cpc	r21, r1
    1e74:	80 f0       	brcs	.+32     	; 0x1e96 <__mulsf3_pse+0xa0>
    1e76:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_inf>
    1e7a:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__fp_szero>
    1e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e80:	e4 f3       	brlt	.-8      	; 0x1e7a <__mulsf3_pse+0x84>
    1e82:	98 3e       	cpi	r25, 0xE8	; 232
    1e84:	d4 f3       	brlt	.-12     	; 0x1e7a <__mulsf3_pse+0x84>
    1e86:	86 95       	lsr	r24
    1e88:	77 95       	ror	r23
    1e8a:	67 95       	ror	r22
    1e8c:	b7 95       	ror	r27
    1e8e:	f7 95       	ror	r31
    1e90:	e7 95       	ror	r30
    1e92:	9f 5f       	subi	r25, 0xFF	; 255
    1e94:	c1 f7       	brne	.-16     	; 0x1e86 <__mulsf3_pse+0x90>
    1e96:	fe 2b       	or	r31, r30
    1e98:	88 0f       	add	r24, r24
    1e9a:	91 1d       	adc	r25, r1
    1e9c:	96 95       	lsr	r25
    1e9e:	87 95       	ror	r24
    1ea0:	97 f9       	bld	r25, 7
    1ea2:	08 95       	ret

00001ea4 <__divmodhi4>:
    1ea4:	97 fb       	bst	r25, 7
    1ea6:	07 2e       	mov	r0, r23
    1ea8:	16 f4       	brtc	.+4      	; 0x1eae <__divmodhi4+0xa>
    1eaa:	00 94       	com	r0
    1eac:	07 d0       	rcall	.+14     	; 0x1ebc <__divmodhi4_neg1>
    1eae:	77 fd       	sbrc	r23, 7
    1eb0:	09 d0       	rcall	.+18     	; 0x1ec4 <__divmodhi4_neg2>
    1eb2:	0e 94 11 10 	call	0x2022	; 0x2022 <__udivmodhi4>
    1eb6:	07 fc       	sbrc	r0, 7
    1eb8:	05 d0       	rcall	.+10     	; 0x1ec4 <__divmodhi4_neg2>
    1eba:	3e f4       	brtc	.+14     	; 0x1eca <__divmodhi4_exit>

00001ebc <__divmodhi4_neg1>:
    1ebc:	90 95       	com	r25
    1ebe:	81 95       	neg	r24
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	08 95       	ret

00001ec4 <__divmodhi4_neg2>:
    1ec4:	70 95       	com	r23
    1ec6:	61 95       	neg	r22
    1ec8:	7f 4f       	sbci	r23, 0xFF	; 255

00001eca <__divmodhi4_exit>:
    1eca:	08 95       	ret

00001ecc <__udivmodsi4>:
    1ecc:	a1 e2       	ldi	r26, 0x21	; 33
    1ece:	1a 2e       	mov	r1, r26
    1ed0:	aa 1b       	sub	r26, r26
    1ed2:	bb 1b       	sub	r27, r27
    1ed4:	fd 01       	movw	r30, r26
    1ed6:	0d c0       	rjmp	.+26     	; 0x1ef2 <__udivmodsi4_ep>

00001ed8 <__udivmodsi4_loop>:
    1ed8:	aa 1f       	adc	r26, r26
    1eda:	bb 1f       	adc	r27, r27
    1edc:	ee 1f       	adc	r30, r30
    1ede:	ff 1f       	adc	r31, r31
    1ee0:	a2 17       	cp	r26, r18
    1ee2:	b3 07       	cpc	r27, r19
    1ee4:	e4 07       	cpc	r30, r20
    1ee6:	f5 07       	cpc	r31, r21
    1ee8:	20 f0       	brcs	.+8      	; 0x1ef2 <__udivmodsi4_ep>
    1eea:	a2 1b       	sub	r26, r18
    1eec:	b3 0b       	sbc	r27, r19
    1eee:	e4 0b       	sbc	r30, r20
    1ef0:	f5 0b       	sbc	r31, r21

00001ef2 <__udivmodsi4_ep>:
    1ef2:	66 1f       	adc	r22, r22
    1ef4:	77 1f       	adc	r23, r23
    1ef6:	88 1f       	adc	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	1a 94       	dec	r1
    1efc:	69 f7       	brne	.-38     	; 0x1ed8 <__udivmodsi4_loop>
    1efe:	60 95       	com	r22
    1f00:	70 95       	com	r23
    1f02:	80 95       	com	r24
    1f04:	90 95       	com	r25
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	bd 01       	movw	r22, r26
    1f0c:	cf 01       	movw	r24, r30
    1f0e:	08 95       	ret

00001f10 <__divmodsi4>:
    1f10:	05 2e       	mov	r0, r21
    1f12:	97 fb       	bst	r25, 7
    1f14:	1e f4       	brtc	.+6      	; 0x1f1c <__divmodsi4+0xc>
    1f16:	00 94       	com	r0
    1f18:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__negsi2>
    1f1c:	57 fd       	sbrc	r21, 7
    1f1e:	07 d0       	rcall	.+14     	; 0x1f2e <__divmodsi4_neg2>
    1f20:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <__udivmodsi4>
    1f24:	07 fc       	sbrc	r0, 7
    1f26:	03 d0       	rcall	.+6      	; 0x1f2e <__divmodsi4_neg2>
    1f28:	4e f4       	brtc	.+18     	; 0x1f3c <__divmodsi4_exit>
    1f2a:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__negsi2>

00001f2e <__divmodsi4_neg2>:
    1f2e:	50 95       	com	r21
    1f30:	40 95       	com	r20
    1f32:	30 95       	com	r19
    1f34:	21 95       	neg	r18
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	4f 4f       	sbci	r20, 0xFF	; 255
    1f3a:	5f 4f       	sbci	r21, 0xFF	; 255

00001f3c <__divmodsi4_exit>:
    1f3c:	08 95       	ret

00001f3e <__negsi2>:
    1f3e:	90 95       	com	r25
    1f40:	80 95       	com	r24
    1f42:	70 95       	com	r23
    1f44:	61 95       	neg	r22
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4c:	08 95       	ret

00001f4e <__muluhisi3>:
    1f4e:	0e 94 25 10 	call	0x204a	; 0x204a <__umulhisi3>
    1f52:	a5 9f       	mul	r26, r21
    1f54:	90 0d       	add	r25, r0
    1f56:	b4 9f       	mul	r27, r20
    1f58:	90 0d       	add	r25, r0
    1f5a:	a4 9f       	mul	r26, r20
    1f5c:	80 0d       	add	r24, r0
    1f5e:	91 1d       	adc	r25, r1
    1f60:	11 24       	eor	r1, r1
    1f62:	08 95       	ret

00001f64 <__umoddi3>:
    1f64:	68 94       	set
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <__udivdi3_umoddi3>

00001f68 <__udivdi3>:
    1f68:	e8 94       	clt

00001f6a <__udivdi3_umoddi3>:
    1f6a:	8f 92       	push	r8
    1f6c:	9f 92       	push	r9
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__udivmod64>
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	9f 90       	pop	r9
    1f7c:	8f 90       	pop	r8
    1f7e:	08 95       	ret

00001f80 <__udivmod64>:
    1f80:	88 24       	eor	r8, r8
    1f82:	99 24       	eor	r9, r9
    1f84:	f4 01       	movw	r30, r8
    1f86:	e4 01       	movw	r28, r8
    1f88:	b0 e4       	ldi	r27, 0x40	; 64
    1f8a:	9f 93       	push	r25
    1f8c:	aa 27       	eor	r26, r26
    1f8e:	9a 15       	cp	r25, r10
    1f90:	8b 04       	cpc	r8, r11
    1f92:	9c 04       	cpc	r9, r12
    1f94:	ed 05       	cpc	r30, r13
    1f96:	fe 05       	cpc	r31, r14
    1f98:	cf 05       	cpc	r28, r15
    1f9a:	d0 07       	cpc	r29, r16
    1f9c:	a1 07       	cpc	r26, r17
    1f9e:	98 f4       	brcc	.+38     	; 0x1fc6 <__udivmod64+0x46>
    1fa0:	ad 2f       	mov	r26, r29
    1fa2:	dc 2f       	mov	r29, r28
    1fa4:	cf 2f       	mov	r28, r31
    1fa6:	fe 2f       	mov	r31, r30
    1fa8:	e9 2d       	mov	r30, r9
    1faa:	98 2c       	mov	r9, r8
    1fac:	89 2e       	mov	r8, r25
    1fae:	98 2f       	mov	r25, r24
    1fb0:	87 2f       	mov	r24, r23
    1fb2:	76 2f       	mov	r23, r22
    1fb4:	65 2f       	mov	r22, r21
    1fb6:	54 2f       	mov	r21, r20
    1fb8:	43 2f       	mov	r20, r19
    1fba:	32 2f       	mov	r19, r18
    1fbc:	22 27       	eor	r18, r18
    1fbe:	b8 50       	subi	r27, 0x08	; 8
    1fc0:	31 f7       	brne	.-52     	; 0x1f8e <__udivmod64+0xe>
    1fc2:	bf 91       	pop	r27
    1fc4:	27 c0       	rjmp	.+78     	; 0x2014 <__udivmod64+0x94>
    1fc6:	1b 2e       	mov	r1, r27
    1fc8:	bf 91       	pop	r27
    1fca:	bb 27       	eor	r27, r27
    1fcc:	22 0f       	add	r18, r18
    1fce:	33 1f       	adc	r19, r19
    1fd0:	44 1f       	adc	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	66 1f       	adc	r22, r22
    1fd6:	77 1f       	adc	r23, r23
    1fd8:	88 1f       	adc	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	88 1c       	adc	r8, r8
    1fde:	99 1c       	adc	r9, r9
    1fe0:	ee 1f       	adc	r30, r30
    1fe2:	ff 1f       	adc	r31, r31
    1fe4:	cc 1f       	adc	r28, r28
    1fe6:	dd 1f       	adc	r29, r29
    1fe8:	aa 1f       	adc	r26, r26
    1fea:	bb 1f       	adc	r27, r27
    1fec:	8a 14       	cp	r8, r10
    1fee:	9b 04       	cpc	r9, r11
    1ff0:	ec 05       	cpc	r30, r12
    1ff2:	fd 05       	cpc	r31, r13
    1ff4:	ce 05       	cpc	r28, r14
    1ff6:	df 05       	cpc	r29, r15
    1ff8:	a0 07       	cpc	r26, r16
    1ffa:	b1 07       	cpc	r27, r17
    1ffc:	48 f0       	brcs	.+18     	; 0x2010 <__udivmod64+0x90>
    1ffe:	8a 18       	sub	r8, r10
    2000:	9b 08       	sbc	r9, r11
    2002:	ec 09       	sbc	r30, r12
    2004:	fd 09       	sbc	r31, r13
    2006:	ce 09       	sbc	r28, r14
    2008:	df 09       	sbc	r29, r15
    200a:	a0 0b       	sbc	r26, r16
    200c:	b1 0b       	sbc	r27, r17
    200e:	21 60       	ori	r18, 0x01	; 1
    2010:	1a 94       	dec	r1
    2012:	e1 f6       	brne	.-72     	; 0x1fcc <__udivmod64+0x4c>
    2014:	2e f4       	brtc	.+10     	; 0x2020 <__udivmod64+0xa0>
    2016:	94 01       	movw	r18, r8
    2018:	af 01       	movw	r20, r30
    201a:	be 01       	movw	r22, r28
    201c:	cd 01       	movw	r24, r26
    201e:	00 0c       	add	r0, r0
    2020:	08 95       	ret

00002022 <__udivmodhi4>:
    2022:	aa 1b       	sub	r26, r26
    2024:	bb 1b       	sub	r27, r27
    2026:	51 e1       	ldi	r21, 0x11	; 17
    2028:	07 c0       	rjmp	.+14     	; 0x2038 <__udivmodhi4_ep>

0000202a <__udivmodhi4_loop>:
    202a:	aa 1f       	adc	r26, r26
    202c:	bb 1f       	adc	r27, r27
    202e:	a6 17       	cp	r26, r22
    2030:	b7 07       	cpc	r27, r23
    2032:	10 f0       	brcs	.+4      	; 0x2038 <__udivmodhi4_ep>
    2034:	a6 1b       	sub	r26, r22
    2036:	b7 0b       	sbc	r27, r23

00002038 <__udivmodhi4_ep>:
    2038:	88 1f       	adc	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	5a 95       	dec	r21
    203e:	a9 f7       	brne	.-22     	; 0x202a <__udivmodhi4_loop>
    2040:	80 95       	com	r24
    2042:	90 95       	com	r25
    2044:	bc 01       	movw	r22, r24
    2046:	cd 01       	movw	r24, r26
    2048:	08 95       	ret

0000204a <__umulhisi3>:
    204a:	a2 9f       	mul	r26, r18
    204c:	b0 01       	movw	r22, r0
    204e:	b3 9f       	mul	r27, r19
    2050:	c0 01       	movw	r24, r0
    2052:	a3 9f       	mul	r26, r19
    2054:	70 0d       	add	r23, r0
    2056:	81 1d       	adc	r24, r1
    2058:	11 24       	eor	r1, r1
    205a:	91 1d       	adc	r25, r1
    205c:	b2 9f       	mul	r27, r18
    205e:	70 0d       	add	r23, r0
    2060:	81 1d       	adc	r24, r1
    2062:	11 24       	eor	r1, r1
    2064:	91 1d       	adc	r25, r1
    2066:	08 95       	ret

00002068 <eeprom_read_byte>:
    2068:	f9 99       	sbic	0x1f, 1	; 31
    206a:	fe cf       	rjmp	.-4      	; 0x2068 <eeprom_read_byte>
    206c:	92 bd       	out	0x22, r25	; 34
    206e:	81 bd       	out	0x21, r24	; 33
    2070:	f8 9a       	sbi	0x1f, 0	; 31
    2072:	99 27       	eor	r25, r25
    2074:	80 b5       	in	r24, 0x20	; 32
    2076:	08 95       	ret

00002078 <eeprom_read_word>:
    2078:	a8 e1       	ldi	r26, 0x18	; 24
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	42 e0       	ldi	r20, 0x02	; 2
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	0c 94 57 10 	jmp	0x20ae	; 0x20ae <eeprom_read_blraw>

00002084 <eeprom_write_byte>:
    2084:	26 2f       	mov	r18, r22

00002086 <eeprom_write_r18>:
    2086:	f9 99       	sbic	0x1f, 1	; 31
    2088:	fe cf       	rjmp	.-4      	; 0x2086 <eeprom_write_r18>
    208a:	1f ba       	out	0x1f, r1	; 31
    208c:	92 bd       	out	0x22, r25	; 34
    208e:	81 bd       	out	0x21, r24	; 33
    2090:	20 bd       	out	0x20, r18	; 32
    2092:	0f b6       	in	r0, 0x3f	; 63
    2094:	f8 94       	cli
    2096:	fa 9a       	sbi	0x1f, 2	; 31
    2098:	f9 9a       	sbi	0x1f, 1	; 31
    209a:	0f be       	out	0x3f, r0	; 63
    209c:	01 96       	adiw	r24, 0x01	; 1
    209e:	08 95       	ret

000020a0 <eeprom_write_word>:
    20a0:	0e 94 42 10 	call	0x2084	; 0x2084 <eeprom_write_byte>
    20a4:	27 2f       	mov	r18, r23
    20a6:	0c 94 43 10 	jmp	0x2086	; 0x2086 <eeprom_write_r18>

000020aa <eeprom_read_block>:
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22

000020ae <eeprom_read_blraw>:
    20ae:	fc 01       	movw	r30, r24
    20b0:	f9 99       	sbic	0x1f, 1	; 31
    20b2:	fe cf       	rjmp	.-4      	; 0x20b0 <eeprom_read_blraw+0x2>
    20b4:	06 c0       	rjmp	.+12     	; 0x20c2 <eeprom_read_blraw+0x14>
    20b6:	f2 bd       	out	0x22, r31	; 34
    20b8:	e1 bd       	out	0x21, r30	; 33
    20ba:	f8 9a       	sbi	0x1f, 0	; 31
    20bc:	31 96       	adiw	r30, 0x01	; 1
    20be:	00 b4       	in	r0, 0x20	; 32
    20c0:	0d 92       	st	X+, r0
    20c2:	41 50       	subi	r20, 0x01	; 1
    20c4:	50 40       	sbci	r21, 0x00	; 0
    20c6:	b8 f7       	brcc	.-18     	; 0x20b6 <eeprom_read_blraw+0x8>
    20c8:	08 95       	ret

000020ca <_exit>:
    20ca:	f8 94       	cli

000020cc <__stop_program>:
    20cc:	ff cf       	rjmp	.-2      	; 0x20cc <__stop_program>
